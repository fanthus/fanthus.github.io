(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{323:function(t,s,a){t.exports=a.p+"assets/img/wechat_qrcode.c0c8a471.png"},460:function(t,s,a){t.exports=a.p+"assets/img/console_0.6f17ee92.png"},461:function(t,s,a){t.exports=a.p+"assets/img/console_1.58f3d362.png"},462:function(t,s,a){t.exports=a.p+"assets/img/console_2.5dbb0db3.png"},463:function(t,s,a){t.exports=a.p+"assets/img/console_3.7202ba79.png"},464:function(t,s,a){t.exports=a.p+"assets/img/console_4.bdbaa303.png"},465:function(t,s,a){t.exports=a.p+"assets/img/console_5.ff945226.png"},466:function(t,s,a){t.exports=a.p+"assets/img/prototype_chain.9cf5e84c.png"},681:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("最近有个项目要用到 uniapp 去开发跨端的小程序，在github上找了一个项目想看看人家源码，结果看到下面这行的时候就有点发懵。")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[t._v("Vue.prototype.StatusBar = e.statusBarHeight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Vue 我还算明白，"),s("code",[t._v("prototype")]),t._v(" 是咋回事？应该是和原型相关的，之前也尝试理解过 JS 的原型链，不过每次总结的都比较零散，这次尝试系统的总结一下。")]),t._v(" "),s("h2",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),s("p",[t._v("复习一下 "),s("a",{attrs:{href:"https://www.runoob.com/js/js-datatypes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS 的引用数据类型"),s("OutboundLink")],1),t._v("（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。我们这篇文章主要关注的是：引用数据类型中的「对象(Object)」和「函数(Function)」。 "),s("strong",[t._v("尽管函数和对象都算是对象类型，但是只有函数对象有 "),s("code",[t._v("prototype")]),t._v(" 属性，而 "),s("code",[t._v("_proto_")]),t._v(" 属性是大家都有的。")]),t._v(" 可以不用管 prototype 和 "),s("em",[t._v("proto")]),t._v(" 到底是干嘛的，后面会有介绍到。")]),t._v(" "),s("p",[t._v("可以先来个例子来直观感受一下：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello world")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"普通函数对象原型"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" printHello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"普通函数对象原型"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" printHello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:a(460),alt:"Untitled"}})]),t._v(" "),s("h2",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("在传统的 JS 里是没有类这个概念的，生成实例对象的方法是通过构造函数的方式，如下")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("newPro "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//传统添加对象方法的方式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHello")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, I am "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Dora'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'person is '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'person new property '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("newPro"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("我们在基础知识中说过，函数对象是有 "),s("code",[t._v("prototype")]),t._v(" 属性的，构造函数当然也算函数对象，所以构造函数也有 "),s("code",[t._v("prototype")]),t._v(" 属性，我们来打印一下 "),s("code",[t._v("Person.prototype")]),t._v(" 看看，结果如图")]),t._v(" "),s("p",[s("img",{attrs:{src:a(461),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("发现 "),s("code",[t._v("Person.prototype")]),t._v(" 里面有后加入的属性和方法，同时它还指向了一个原型对象，这里先不管它。")]),t._v(" "),s("p",[t._v("但传统的构造方法创造实例这种写法很繁琐，而且对于其他面向对象语言的编程者来说，这样写很困惑，于是在 ES6 的时候，和其他面向对象编程语言看齐，引入了类(Class)的概念。")]),t._v(" "),s("h2",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),s("p",[t._v("ES6 引入的类作为对象的模板，你可以使用 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class",target:"_blank",rel:"noopener noreferrer"}},[t._v("class"),s("OutboundLink")],1),t._v(" 关键字声明一个类。")]),t._v(" "),s("p",[t._v("定义类并通过类来创建对象的语法如下：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, I am "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dora"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("代码中 "),s("code",[t._v("Person")]),t._v(" 类中的 "),s("code",[t._v("constructor()")]),t._v(" 就是 "),s("code",[t._v("Person")]),t._v(" 类的构造方法。")]),t._v(" "),s("p",[t._v("ES6 的类，完全可以看作构造函数的另一种写法：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Person "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function"')]),t._v("\nPerson "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("上面代码表明，类的数据类型就是函数，类本身就指向构造函数。")]),t._v(" "),s("p",[t._v("而传统构造函数的 "),s("code",[t._v("prototype")]),t._v(" 属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的 "),s("code",[t._v("prototype")]),t._v(" 属性上面。我们可以打印一下类的 "),s("code",[t._v("prototype")]),t._v("，即 "),s("code",[t._v("Person.prototype")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(462),alt:"Untitled"}})]),t._v(" "),s("h3",{attrs:{id:"类和构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类和构造函数"}},[t._v("#")]),t._v(" 类和构造函数")]),t._v(" "),s("p",[t._v("对比类和传统的构造函数的话，其实我自己理解类就是传统构造函数的一种新的语法表现形式，而并不是一种新的东西，它们创建对象的背后依赖的都还是原型。")]),t._v(" "),s("p",[t._v("在传统构造函数里，原型是通过构造函数来创建对象，对象也可以通过 Prototype 属性来指向原型。而在类的实现里，其实就是还是原型和类的构造函数一起完成了类的创建。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(463),alt:"Untitled"}})]),t._v(" "),s("h2",{attrs:{id:"原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),s("p",[t._v("上面说了半天原型，那原型到底是什么？MDN 里对"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes",target:"_blank",rel:"noopener noreferrer"}},[t._v("原型的定义"),s("OutboundLink")],1),t._v("是「原型是 JavaScript 对象相互继承特性的机制，JavaScript 中所有的对象都有一个内置属性，称为它的 "),s("strong",[t._v("prototype")]),t._v("（原型）。」")]),t._v(" "),s("blockquote",[s("p",[t._v("注意！指向区分对象原型的属性并不是 "),s("code",[t._v("prototype")]),t._v("，而是 "),s("code",[t._v("__proto__")]),t._v("。访问对象原型的标准方法是 "),s("code",[t._v("Object.getPrototypeOf()")]),t._v("。")])]),t._v(" "),s("p",[t._v("所有对象都有原型，每个原型都有与之对应的构造函数，要么是传统的构造函数，要么是类的构造函数。以后为了方便我们就说是类的构造函数了。")]),t._v(" "),s("p",[t._v("前面我们说到的类的原型是通过访问类的 "),s("code",[t._v("prototype")]),t._v(" 属性来获取到的，那如何获取实例对象的原型属性呢？这里引出一个隐式原型和显式原型的概念。")]),t._v(" "),s("h3",{attrs:{id:"隐式原型和显式原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式原型和显式原型"}},[t._v("#")]),t._v(" 隐式原型和显式原型")]),t._v(" "),s("p",[t._v("官方似乎并没有这俩概念的区分，这里为了让自己看明白一些国内的文档，所以提一下这俩概念。")]),t._v(" "),s("ul",[s("li",[t._v("实例对象的属性 "),s("code",[t._v("__proto__")]),t._v(" 称为隐式原型，")]),t._v(" "),s("li",[t._v("类（或者说传统构造函数）的属性 "),s("code",[t._v("prototype")]),t._v(" 称为显式原型。")])]),t._v(" "),s("p",[t._v("还是拿上面的 "),s("code",[t._v("Person")]),t._v(" 类来举例子：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dora"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("执行结果如图")]),t._v(" "),s("p",[s("img",{attrs:{src:a(464),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("可以看到不管是隐式原型和显式原型都指向同样的原型地址。")]),t._v(" "),s("h2",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),s("p",[t._v("什么是原型链？官方定义如下，JavaScript 中所有的对象都有一个内置属性("),s("code",[t._v("__proto__")]),t._v(")，称为它的原型。它本身是一个对象，故原型对象也会有它自己的原型，逐渐构成了"),s("strong",[t._v("原型链")]),t._v("。原型链终止于拥有 null 作为其原型的对象上。")]),t._v(" "),s("p",[t._v("原型链有点类似类继承的感觉，举个例子来测试一下，还是使用 Person 类，这次我们新建一个 Person 的子类 Student")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("class Student extends Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("constructor(name, age, score)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    this.score = score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlet student = new "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fanthus"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 18"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 99"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole."),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("执行结果如下")]),t._v(" "),s("p",[s("img",{attrs:{src:a(465),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("执行结果中 "),s("code",[t._v("[[prototype]]")]),t._v("  就相当于 "),s("code",[t._v("__proto__")]),t._v("，根据 ES 标准，访问 "),s("code",[t._v("someObject")]),t._v(" 实例对象原型，是用 "),s("code",[t._v("someObject.[[Prototype]]")]),t._v(" 这种方式。")]),t._v(" "),s("blockquote",[s("p",[t._v("其实我并不明白 "),s("code",[t._v("student.__proto__")]),t._v(" 的 Prototype 这儿为啥打印的是 "),s("code",[t._v("Person")]),t._v("，难道不应该 是 Student 的原型吗，下面对应的 "),s("code",[t._v("constructor")]),t._v(" 是 "),s("code",[t._v("class student")]),t._v("，倒是对的上。")])]),t._v(" "),s("p",[t._v("用图来说明原型链的话，如图：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(466),alt:"Untitled"}})]),t._v(" "),s("h3",{attrs:{id:"原型链作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链作用"}},[t._v("#")]),t._v(" 原型链作用")]),t._v(" "),s("p",[t._v("最重要的是帮助实现了继承相关的功能。当你试图访问一个对象的属性时：如果在对象本身中找不到该属性，就会在原型中搜索该属性。如果仍然找不到该属性，那么就搜索原型的原型，以此类推，直到找到该属性，或者到达链的末端，在这种情况下，返回 undefined。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("以上就是构造函数，类，原型的一些知识，基本上梳理了我的疑惑。回到文章最开始的问题 "),s("code",[t._v("Vue.prototype.StatusBar = e.statusBarHeight;")]),t._v(" 这句话本质就是给 "),s("code",[t._v("Vue")]),t._v(" 原型增加了一个 "),s("code",[t._v("StatusBar")]),t._v(" 的属性，后续就能在 Vue 实例里通过 "),s("code",[t._v("this.StatusBar")]),t._v(" 来访问这个变量了。")]),t._v(" "),s("p",[t._v("参考地址:")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV15T411t725/?spm_id_from=333.337.search-card.all.click&vd_source=06c3d20715183a10b894274ffd31554c",target:"_blank",rel:"noopener noreferrer"}},[t._v("B站-js原型链、构造函数和类"),s("OutboundLink")],1),t._v("   #这个1分钟视频介绍原型链、构造函数和类的关系，很清晰。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844903989088092174",target:"_blank",rel:"noopener noreferrer"}},[t._v("轻松理解JS 原型原型链"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.aliyun.com/article/1085948",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue中 Vue.prototype 详解及使用"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://v2.cn.vuejs.org/v2/cookbook/adding-instance-properties.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue2-添加实例 property"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-对象原型"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Classes_in_JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-JavaScript 中的类"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-构造方法"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://wangdoc.com/es6/class",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6教程-Class 的基本语法"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN-继承与原型链"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/2023-09-05-运行时学习笔记-基于运行时的继承体系.html"}},[t._v("运行时学习笔记-基于运行时的继承体系")])],1)]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("关注我的微信公众号，我在上面会分享我的日常所思所想。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:a(323),width:"40%/"}})]),t._v(" "),s("Vssue",{attrs:{title:"JS学习笔记-原型链&类&构造函数"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);