(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{323:function(t,s,a){t.exports=a.p+"assets/img/wechat_qrcode.c0c8a471.png"},454:function(t,s,a){t.exports=a.p+"assets/img/message_forward.e4d420a3.png"},455:function(t,s,a){t.exports=a.p+"assets/img/message_inherit.e6861eef.png"},456:function(t,s,a){t.exports=a.p+"assets/img/message_mutiple_inherit.3fecb321.png"},679:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("之前的文章文章聊了一下Objective-C运行时机制的内容，这篇接着上篇文章最后的引子，继续聊一下 Objective-C 的运行时消息发送机制。")]),t._v(" "),s("p",[t._v("Objective-C 的消息发送机制全都依赖于运行时，这点是和新晋的 Swift 语言有很大的不同，Swift 的消息派发机制主要是依赖于静态绑定(static binding)，即编译器明确的知道要执行哪个方法，直接生成在编译的时候就生成好跳转代码，而不需要在运行时决定到底执行哪个方法，这点是和 OC 消息派送最大的不同。")]),t._v(" "),s("p",[t._v("这也就是为什么在 Objective-C 中，我们不会使用「方法调用」来形容方法的被动执行，而是使用「消息传递」这个词。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("方法调用:")]),t._v(" 通常与静态类型语言（如C++和Java）以及编译时绑定相关。")]),t._v(" "),s("p",[s("strong",[t._v("消息传递")]),t._v(": 通常与动态类型语言（如Objective-C、Smalltalk和Python）以及运行时绑定相关。")])]),t._v(" "),s("h2",{attrs:{id:"消息发送-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息发送-api"}},[t._v("#")]),t._v(" 消息发送 API")]),t._v(" "),s("p",[t._v("在OC上层语言调用中，我们消息传递的语法是 "),s("code",[t._v("[receiver message]")]),t._v("，不过在编译过程中，会把这条语句编译为类似 "),s("code",[t._v("objc_msgSend(object, @selector(message))")]),t._v(" 这样的 API。")]),t._v(" "),s("h3",{attrs:{id:"objc-msgsend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#objc-msgsend"}},[t._v("#")]),t._v(" objc_msgSend")]),t._v(" "),s("p",[s("code",[t._v("objc_msgSend")]),t._v(" API 的 discussion 部分如下👇")]),t._v(" "),s("p",[t._v("当遇到方法调用时，编译器会生成对函数 "),s("code",[t._v("objc_msgSend")]),t._v(" 、 "),s("code",[t._v("objc_msgSend_stret")]),t._v(" 、 "),s("code",[t._v("objc_msgSendSuper")]),t._v(" 或 "),s("code",[t._v("objc_msgSendSuper_stret")]),t._v(" 之一的调用。发送到对象的超类（使用 super 关键字）的消息是使用 "),s("code",[t._v("objc_msgSendSuper")]),t._v(" 发送的；其他消息使用 "),s("code",[t._v("objc_msgSend")]),t._v(" 发送。将数据结构作为返回值的方法使用 "),s("code",[t._v("objc_msgSendSuper_stret")]),t._v(" 和 "),s("code",[t._v("objc_msgSend_stret")]),t._v(" 发送。")]),t._v(" "),s("h3",{attrs:{id:"method-selector-imp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-selector-imp"}},[t._v("#")]),t._v(" Method  & Selector & IMP")]),t._v(" "),s("p",[t._v("这三个属于的官方定义如下")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.apple.com/documentation/objectivec/method?language=objc",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Method")]),s("OutboundLink")],1),t._v(" 表示类定义中的方法的类型。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.apple.com/documentation/objectivec/sel?language=objc",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("SEL")]),s("OutboundLink")],1),t._v(" 表示方法选择器（选择子）的不透明类型，本质上是个 C 的字符串，并且已经在运行时注册。但在使用选择器时，必须使用从 "),s("code",[t._v("sel_registerName")]),t._v(" 或 Objective-C 编译器指令 "),s("code",[t._v("@selector()")]),t._v(" 返回的值，而不能简单地将 C 字符串转换为 "),s("code",[t._v("SEL")]),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.apple.com/documentation/objectivec/objective-c_runtime/imp?language=objc",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("IMP")]),s("OutboundLink")],1),t._v(" 指向方法实现开始的指针。该数据类型是指向实现该方法的函数开头的指针，第一个参数是指向 "),s("code",[t._v("self")]),t._v(" 的指针，第二个参数是 "),s("code",[t._v("SEL")]),t._v("，即方法选择器。")]),t._v(" "),s("p",[t._v("相关的定义如下：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// An opaque type that represents a method in a class definition.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" objc_method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//objc.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// An opaque type that represents a method selector.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" objc_selector "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A pointer to the function of a method implementation.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IMP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* id, SEL, ... */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在 runtime 的 "),s("code",[t._v("objc_class")]),t._v(" 中的方法列表("),s("code",[t._v("method_list_t")]),t._v(")里看到方法类型是 "),s("code",[t._v("method_t")]),t._v("。我理解 "),s("code",[t._v("method_t")]),t._v(" 和 "),s("code",[t._v("objc_method")]),t._v(" 类型应该是一个意思。")]),t._v(" "),s("p",[t._v("总的来说，"),s("code",[t._v("Method")]),t._v(" 是 "),s("code",[t._v("selector")]),t._v(" 和 "),s("code",[t._v("IMP")]),t._v(" 的集合体。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("SEL")]),t._v(" 和 "),s("code",[t._v("@selector")])]),t._v(" "),s("p",[s("code",[t._v("SEL")]),t._v(" 可以理解为类型，已编译的选择器被分配给特殊类型 "),s("code",[t._v("SEL")])]),t._v(" "),s("p",[s("code",[t._v("@selector()")]),t._v(" 指令允许您引用已编译的选择器，而不是完整的方法名称。举个例子：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("SEL setWidthHeight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明 SEL 类型变量")]),t._v("\nsetWidthHeight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setWidth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取选择子")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"消息派送流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息派送流程"}},[t._v("#")]),t._v(" 消息派送流程")]),t._v(" "),s("p",[t._v("尝试分析一下消息派送的流程，当消息发送到对象时，消息会现在对象所属类的体系中进行查找，如果没有找到的话就会触发消息转发机制。具体介绍如下👇")]),t._v(" "),s("h3",{attrs:{id:"继承体系内查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承体系内查找"}},[t._v("#")]),t._v(" 继承体系内查找")]),t._v(" "),s("p",[t._v("当向对象消息发送的时候，会通过对象的 "),s("code",[t._v("isa")]),t._v(" 指针找到所属类结构，在类结构中查找方法列表(dispatch table)中的方法选择器。如果在那里找不到选择器， "),s("code",[t._v("objc_msgSend")]),t._v(" 就会沿着指向超类的指针并尝试在其调度表中找到选择器。连续失败会导致 "),s("code",[t._v("objc_msgSend")]),t._v(" 一直沿着类继承结构向上寻找，直到到达 "),s("code",[t._v("NSObject")]),t._v(" 类。一旦找到选择器，该函数就会调用方法列表中的方法，并将其传递给接收对象的数据结构。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：这里的对象不仅仅包含类实例也包含类对象。")])]),t._v(" "),s("h3",{attrs:{id:"缓存机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[t._v("#")]),t._v(" 缓存机制")]),t._v(" "),s("p",[t._v("同时为了加快消息传递的过程，也引入了缓存机制，想想如果不去做方法缓存，一些较极端的情况下方法很多，继承体系又比较复杂，那消息查找的时间复杂度就是 O(N^2)，缓存之后直接降到接近 O(N)，所以缓存是非常必要的。")]),t._v(" "),s("p",[t._v("每个类都有一个单独的缓存，它可以包含父类以及当前类中的方法。在搜索调度表之前，消息传递例程首先检查接收对象类的缓存（理论上，使用过一次的方法可能会再次使用）。如果方法位于缓存中，则消息传递仅比函数调用稍慢（因为有个在缓存中查找消息的流程）。一旦程序运行了足够长的时间来“预热”其缓存，几乎它发送的所有消息都会找到缓存的方法。当程序运行时，缓存会动态增长以容纳新消息。")]),t._v(" "),s("h3",{attrs:{id:"消息转发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息转发机制"}},[t._v("#")]),t._v(" 消息转发机制")]),t._v(" "),s("p",[t._v("如果没有 OC 的消息转发机制的话，我们给实例发送一个压根不存在的方法，运行后大概率会得到下面的异常提示：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("Terminating app due to uncaught exception "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'NSInvalidArgumentException'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reason"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" '"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("YourClass notExistMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" unrecognized selector sent to instance "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x600000010020")]),t._v("'\n")])])]),s("p",[t._v("有的时候则可能是我们不小心的疏忽导致了程序的崩溃，幸亏 Objective-C 提供了一个消息转发机制来让我们有更多的补救措施来避免类似情况的发生。理论上 Swift 这种静态语言是根本不会提供这种动态消息转发机制的。")]),t._v(" "),s("p",[t._v("消息转发机制有两个阶段")]),t._v(" "),s("p",[s("strong",[t._v("1️⃣ 动态方法解析(dynamic method resolution)。")])]),t._v(" "),s("p",[t._v("当我们给某个类实例发送消息，而整个类继承体系都没有办法找到对应方法的时候，则会调用当前类的方法 "),s("code",[t._v("+ (BOOL)resolveInstanceMethod:(SEL)sel")]),t._v("，此时我们可以在这个方法里面为当前类加入已经准备好的应对方法。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("resolveInstanceMethod")]),t._v(" API 说明\nDynamically provides an implementation for a given selector for an instance method. Return YES if the method was found and added to the receiver, otherwise NO.")])]),t._v(" "),s("p",[t._v("举个使用例子👇")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Student "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("notExistMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Student\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("resolveInstanceMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sel "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断之后动态添加方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("notExistMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_addMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IMP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" dynamicMethodIMP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v@:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" YES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" resolveInstanceMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///提前预备好的C方法，因为OC方法至少带两个参数self和_cmd，所以这里也要带上数量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dynamicMethodIMP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SEL _cmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"dynamic method IMP"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//main.m")]),t._v("\nStudent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Student new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stu notExistMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("blockquote",[s("p",[t._v("同理，如果消息是发给类对象，则会调用对应类方法 "),s("code",[t._v("+ (BOOL)resolveClassMethod:(SEL)sel")]),t._v("。")])]),t._v(" "),s("p",[t._v("这里有个细节是，如果你没有在解析方法 "),s("code",[t._v("resolveInstanceMethod")]),t._v(" 里添加选择子对应的实现的话，则这个解析方法会执行两遍，也很好理解，因为在向类添加了实例方法后，需要给消息派发系统一个机会去执行新添加的实例方法，所以消息派发机制会重新走一遍，如果还是没有找到对应选择子的实例方法，则会继续走一遍 "),s("code",[t._v("resolveInstanceMethod")]),t._v(" 方法。")]),t._v(" "),s("p",[s("strong",[t._v("2️⃣ 备援接收者(fast message forwarding)")])]),t._v(" "),s("p",[t._v("如果你没有对消息做上一步动态解析，运行时系统会给接受对象第二次机会来对消息进行处理。如果目标对象实现了 "),s("code",[t._v("-forwardingTargetForSelector:")]),t._v(" ，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("forwardingTargetForSelector")]),t._v(" API 说明\nReturns the object to which unrecognized messages should first be directed.")])]),t._v(" "),s("p",[t._v("如果一个对象实现或继承此方法，并返回非 "),s("code",[t._v("nil")]),t._v(" 且非 "),s("code",[t._v("self")]),t._v(" 结果，则返回的对象将用作新的接收者对象，并且完整执行新对象的消息派送流程。 显然，如果您从此方法返回 self，代码就会陷入无限循环。")]),t._v(" "),s("p",[t._v("举个使用例子👇")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🧑‍🏫 Techer")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Teacher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Teacher\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("subject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"teacher teach %@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🧑‍🎓 Student")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Student "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Teacher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("teacher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Student\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("init "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    teacher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Teacher new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("forwardingTargetForSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aSelector "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aSelector "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" teacher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" forwardingTargetForSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("aSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🤖具体执行")]),t._v("\nStudent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Student new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stu teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"English"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🖥️打印结果")]),t._v("\nOCDemo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17517")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("555894")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" teacher teach English\n")])])]),s("p",[t._v("还挺有意思的，官方的"),s("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW12",target:"_blank",rel:"noopener noreferrer"}},[t._v("消息派发的文档"),s("OutboundLink")],1),t._v("里似乎并没有提到这个消息快速转发机制。")]),t._v(" "),s("p",[t._v("3️⃣ "),s("strong",[t._v("完整消息转发(normal message forwarding)。")])]),t._v(" "),s("p",[t._v("如果你没有实现备援接收者方法，运行时系统会给接受对象最后一次机会来对消息进行处理，即运行时会给接收消息的对象那个发送 "),s("code",[t._v("forwardInvocation:")]),t._v(" 消息，这个消息会将原始消息封装成一个 "),s("code",[t._v("NSInvocation")]),t._v(" 对象，并将其作为方法参数传到该方法内。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("- (void)forwardInvocation:(NSInvocation *)invocation;")]),t._v(" API 说明\nPasses a given invocation to the real object the proxy represents.")])]),t._v(" "),s("p",[t._v("我们就可以实现 "),s("code",[t._v("forwardInvocation:")]),t._v(" 方法来提供对消息的响应，这个方法实现通常就是将消息转发给能处理这个消息的对象。")]),t._v(" "),s("p",[t._v("不过这时候如果已经错过了动态向类中添加实例方法("),s("code",[t._v("class_addMethod")]),t._v(")的机会了，在 "),s("code",[t._v("forwardInvocation:")]),t._v(" 里添加实例方法，并不会像 "),s("code",[t._v("resolveInstanceMethod")]),t._v(" API 一样重新触发消息派发机制的从头执行，所以什么 API 做什么事，不要在转发消息的 API 里做添加实例方法的事情。")]),t._v(" "),s("p",[s("code",[t._v("forwardInvocation:")]),t._v(" 的默认实现其实就是调用了 "),s("code",[t._v("doesNotRecognizeSelector:")]),t._v("，也就是我们在这小节刚开始提到的运行异常的提示消息。")]),t._v(" "),s("p",[t._v("举个使用例子👇")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🧑‍🏫 Techer")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Teacher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Teacher\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("subject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"teacher teach %@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🧑‍🎓 Student")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Student "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Teacher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("teacher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Student\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("init "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    teacher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Teacher new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 此方法必须实现，否则 forwardInvocation: 不会被调用，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Returns an NSMethodSignature object that contains a description of the method identified by a given selector.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMethodSignature"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("methodSignatureForSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("selector "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"methodSignatureForSelector %@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromSelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("selector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    NSMethodSignature"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" signature "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" methodSignatureForSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("selector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("signature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       signature "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("teacher methodSignatureForSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("selector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" signature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 消息转发方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("forwardInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInvocation "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("anInvocation "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"forwardInvocation %@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("anInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("teacher respondsToSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("anInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("anInvocation invokeWithTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("teacher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" forwardInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("anInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🤖具体执行")]),t._v("\nStudent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Student new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stu teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"English"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//🖥️打印结果")]),t._v("\nOCDemo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17008")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("532949")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" methodSignatureForSelector teach"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nOCDemo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17008")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("532949")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" forwardInvocation "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NSInvocation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x6000017002c0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nOCDemo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17008")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("532949")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" teacher teach English\n")])])]),s("p",[t._v("整体的消息转发流程如下")]),t._v(" "),s("p",[s("img",{attrs:{src:a(454),alt:"Untitled"}})]),t._v(" "),s("h3",{attrs:{id:"额外的话题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#额外的话题"}},[t._v("#")]),t._v(" 额外的话题")]),t._v(" "),s("p",[t._v("消息派发的流程基本上介绍完了，但是还有有一些和消息派发相关的话题，这里也聊一下")]),t._v(" "),s("p",[s("strong",[t._v("1️⃣ 消息转发与多重继承（Forwarding and Multiple Inheritance）")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面向对象编程中的多重继承（multiple inheritance）")]),t._v(" 指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。\n— 维基百科「多重继承」")])]),t._v(" "),s("p",[t._v("消息转发从某种程度上模拟了多重继承。像下图里面，我们给 "),s("code",[t._v("Warrior")]),t._v("(战士) 类发送 "),s("code",[t._v("negotiate")]),t._v("(谈判) 消息，Warrior 可以将这个消息转发给 "),s("code",[t._v("Diplomat")]),t._v("(外交官) 实现。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(455),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("在外界看来，"),s("code",[t._v("Warrior")]),t._v(" 类似乎是继承了 "),s("code",[t._v("Diplomat")]),t._v(" 实现了 "),s("code",[t._v("negotiate")]),t._v(" 方法，尽管它实际只是做了转发消息的过程。因此，"),s("code",[t._v("Warrior")]),t._v(" 从继承层次结构的两个分支“继承”方法，它自己的分支和响应消息的对象的分支。假设 "),s("code",[t._v("Warrior")]),t._v(" 是继承自 "),s("code",[t._v("Army")]),t._v(" 类。则看起来的继承关系是")]),t._v(" "),s("p",[s("img",{attrs:{src:a(456),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("消息转发提供了多重继承的大部分功能。 然而，两者之间有重要的区别：")]),t._v(" "),s("p",[t._v("① 从使用角度来说，多重继承倾向于将不同的功能组合在一个对象中，它倾向于大型、多面的对象；而转发则将不同的职责分配给不同的对象。 它将问题分解为更小的对象，但以对消息发送者透明的方式关联这些对象。")]),t._v(" "),s("p",[t._v("② 尽管消息转发模拟了继承，但是 "),s("code",[t._v("NSObject")]),t._v(" 类并没有把这两个概念混在一起，像 "),s("code",[t._v("respondsToSelector:")]),t._v(" 和 "),s("code",[t._v("isKindOfClass:")]),t._v(" 这类方法依然仅仅在继承体系内查找对应实现，比如我们像 "),s("code",[t._v("Warrior")]),t._v(" 实例发送 "),s("code",[t._v("respondsToSelector:")]),t._v(" 消息，就算 "),s("code",[t._v("Warrior")]),t._v(" 实现了消息转发方法，但返回结果依然是 "),s("code",[t._v("NO")]),t._v("。如果想要返回不同的结果，则你需要重新实现 "),s("code",[t._v("respondsToSelector:")]),t._v(" 和 "),s("code",[t._v("isKindOfClass:")]),t._v(" 这类方法。")]),t._v(" "),s("p",[t._v("2️⃣ 消息转发的底层实现机制。")]),t._v(" "),s("p",[t._v("大神 @draveness 分析了 "),s("code",[t._v("objc_msgSend")]),t._v(" 的底层实现，在"),s("a",{attrs:{href:"https://github.com/draveness/analyze/blob/master/contents/objc/%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9C%8B%20ObjC%20%E4%B8%AD%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%91%E9%80%81.md#%E8%A7%A3%E6%9E%90-objc_msgsend",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("。基本上底层实现和我们上面的分析的结果没有太大差异，对底层实现感兴趣的小伙伴，可以直接跳转去对应的文章看，这里不再赘述了。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("以上就是这篇文章的全部内容，简单概括 Objective-C 的的消息派发流程就是：")]),t._v(" "),s("ul",[s("li",[t._v("尝试命中对象类的缓存;")]),t._v(" "),s("li",[t._v("在对象类的继承体系方法列表中尝试找到该消息；")]),t._v(" "),s("li",[t._v("通过实现动态解析方法来动态增加对应方法;")]),t._v(" "),s("li",[t._v("实现 "),s("code",[t._v("forwardingTargetForSelectoor:")]),t._v(" 进行快速转发;")]),t._v(" "),s("li",[t._v("实现 "),s("code",[t._v("forwardInvocation:")]),t._v(" 进行最后消息转发。")])]),t._v(" "),s("p",[t._v("最后多说一句，就算是使用 Swift 语言，如果自定义类继承了 "),s("code",[t._v("NSObject")]),t._v("，也能获得动态消息派发的能力，参考上一篇我们对继承 "),s("code",[t._v("NSObject")]),t._v(" 子类获得 OC 动态能力的说明。")]),t._v(" "),s("p",[t._v("参考地址:")]),t._v(" "),s("ol",[s("li",[s("RouterLink",{attrs:{to:"/_posts/2023-09-05-运行时学习笔记-基于运行时的继承体系.html"}},[t._v("运行学习笔记-基于运行时的继承体系")])],1),t._v(" "),s("li",[s("a",{attrs:{href:"https://book.douban.com/subject/25829244/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective Objective-C 2.0 Chapter2"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mikeash.com/pyblog/friday-qa-2009-03-27-objective-c-message-forwarding.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Friday Q&A 2009-03-27: Objective-C Message Forwarding"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C Runtime Programming Guide - Messaging"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/draveness/analyze/blob/master/contents/objc/%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9C%8B%20ObjC%20%E4%B8%AD%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%91%E9%80%81.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("@draveness-从源代码看 ObjC 中消息的发送"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://tech.glowing.com/cn/objective-c-runtime/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Glow 技术团队博客-Objective-C Runtime 消息发送"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/606705452",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 Swift 的方法派发"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://toutiao.io/posts/to0v9q/preview",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift Runtime分析：还像OC Runtime一样吗？"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://betterprogramming.pub/a-deep-dive-into-method-dispatches-in-swift-65a8e408a7d0",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Deep Dive Into Method Dispatches in Swift"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.apple.com/swift/blog/?id=27&source=post_page-----930da65c0516--------------------------------",target:"_blank",rel:"noopener noreferrer"}},[t._v("Increasing Performance by Reducing Dynamic Dispatch"),s("OutboundLink")],1)])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("关注我的微信公众号，我在上面会分享我的日常所思所想。\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:a(323),width:"40%/"}})]),s("p"),t._v(" "),s("Vssue",{attrs:{title:"Objective-C运行时学习笔记-消息派发机制"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);