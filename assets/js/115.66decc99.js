(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{710:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("日常开发中我们最关注的一个指标就是 App 的崩溃率，所以「如何提升应用的稳定性」这个话题就显得比较重要。")]),t._v(" "),a("p",[t._v("这篇文章尝试从项目层面以及 Crash 防护层面来聊聊我理解的提升稳定性的方法。")]),t._v(" "),a("h2",{attrs:{id:"项目层面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目层面"}},[t._v("#")]),t._v(" 项目层面")]),t._v(" "),a("h3",{attrs:{id:"功能开关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能开关"}},[t._v("#")]),t._v(" 功能开关")]),t._v(" "),a("p",[t._v("当项目要增加一个技术相关的模块儿，比如我们开发了一个基于 Runloop 监听卡顿的技术需求，假设测试同事在测试的时候并没有覆盖到所有的测试场景，同时这个技术需求开发的有问题，可能会导致崩溃。那上线之后可能我们项目的崩溃率就会提升。")]),t._v(" "),a("p",[t._v("这种场景我们其实可以做一个服务器开关，客户端通过在运行时发送网络请求来确定是否运行技术需求的相关代码，如果出现了线上的崩溃问题，我们可以及时的关闭对应的功能，保证项目的稳定性。")]),t._v(" "),a("h3",{attrs:{id:"使用断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用断言"}},[t._v("#")]),t._v(" 使用断言")]),t._v(" "),a("p",[t._v("项目中尽可能在自己任务不可能的情况下使用断言，将可能崩溃的场景在开发阶段就暴露出来。在我实际开发的经验里，确实通过断言提前预判到一些可能的崩溃问题。最终避免了线上的崩溃。")]),t._v(" "),a("h3",{attrs:{id:"通过编译检查规范代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过编译检查规范代码"}},[t._v("#")]),t._v(" 通过编译检查规范代码")]),t._v(" "),a("p",[t._v("Swift 项目可以通过 SwiftLint 去进行一些配置，比如可以约束团队成员不要进行强制转换，如果出现强制转换就会编译报错，比如下面这种，如果不想全局生效的化，可以配置指定的文件(正则匹配)不生效")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("btn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cornerRadius "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//CompileError: Force Cast Violation: Force casts should be avoided (force_cast)")]),t._v("\n")])])]),a("p",[t._v("对应规则")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#excluded:\n#  - SwiftDemo/ViewController.swift //指定文件不生效\nforce_cast:\n  severity: error # explicitly\n")])])]),a("blockquote",[a("p",[t._v("SwiftLint 可以通过 Pod 集成之后，在项目根目录下配置 .swiftlint.yml 规则文件去使用。具体的一些编译规则可以看官方的"),a("a",{attrs:{href:"https://realm.github.io/SwiftLint/rule-directory.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("规则文档"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"捕获异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获异常"}},[t._v("#")]),t._v(" 捕获异常")]),t._v(" "),a("h3",{attrs:{id:"抛出异常并捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抛出异常并捕获"}},[t._v("#")]),t._v(" 抛出异常并捕获")]),t._v(" "),a("p",[t._v("不管是 OC 还是 Swift 都从语言层面提供了异常捕获的机制。")]),t._v(" "),a("p",[t._v("OC 异常捕获的方式如下：")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//越界访问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exception %@"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"finally"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Swift 异常捕获，对于可能抛出异常的方法需要通过 do-catch 的方式去进行捕获，否则也会编译报错 "),a("code",[t._v("Errors thrown from here are not handled")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contentsOfFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xx"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alwaysMapped"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"content file ')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('异常处理"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"配置异常处理逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置异常处理逻辑"}},[t._v("#")]),t._v(" 配置异常处理逻辑")]),t._v(" "),a("p",[a("strong",[t._v("通过 "),a("code",[t._v("NSUncaughtExceptionHandler")]),t._v(" 来捕获并处理异常")])]),t._v(" "),a("p",[t._v("具体使用方式如下")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("void "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UncaughtExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exception callStackSymbols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("reason "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exception reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exception name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n%@\\n%@\\n%@"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在程序指定位置注册异常捕获配置方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSSetUncaughtExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UncaughtExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("当出现程序越界之类的错误会抛出异常，被异常捕获函数捕获，这让我们有机会去拿到崩溃信息（"),a("a",{attrs:{href:"http://developer.apple.com/documentation/Darwin/Reference/ManPages/man3/backtrace_symbols.3.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("backtrace_symbols"),a("OutboundLink")],1),t._v("） 去做进一步的处理。")]),t._v(" "),a("p",[t._v("需要注意的一点是，如果重复调用 NSSetUncaughtExceptionHandler 方法的话，后面的调用会覆盖前面调用配置异常处理方法，所以可以通过 NSGetUncaughtExceptionHandler 拿到并保存上一个异常处理方法（也许没有不过不影响），然后在我们自己的异常处理方法中，再调用上一个异常处理方法。")]),t._v(" "),a("p",[t._v("另外就是 Swift 语言中也可以通过如下方式使用这个 API，不过这种方法不能捕获 Swift 运行时错误，像 Swift 中的数组越界就是通过 Swift 运行时报错的，所以这种 API 是不能捕获 Swift 中数组越界的错误，事实上大部分的 Swift 中的错误都是 Swift 运行时报错的，所以这个 API 在 Swift 中感觉很鸡肋。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSSetUncaughtExceptionHandler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callStackSymbols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("至于为什么 Swift 这么设计？可以看看"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38737880/uncaught-error-exception-handling-in-swift",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("注：macOS 上同样的异常并不会引起崩溃，这是 AppKit 的一个默认操作。具体可以参考"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/334938541",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("通过 BSD 的 "),a("code",[t._v("signal")]),t._v(" 来捕获并处理异常")])]),t._v(" "),a("p",[t._v("我们也可以通过 "),a("code",[t._v("signal")]),t._v(" API 注册对应信号的函数，然后在函数中做进一步的处理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("void customSignalExceptionHandler(int signal) {\n\t//获取崩溃信息将崩溃信息写入指定文件\n}\n//**signal API:**Sets the error handler for signal sig. \n+ (void)setSignalExceptionHandler {\n    signal(SIGHUP, customSignalExceptionHandler);\n    signal(SIGINT, customSignalExceptionHandler);\n    signal(SIGQUIT, customSignalExceptionHandler);\n    signal(SIGABRT, customSignalExceptionHandler);\n    signal(SIGILL, customSignalExceptionHandler);\n    signal(SIGSEGV, customSignalExceptionHandler);\n    signal(SIGFPE, customSignalExceptionHandler);\n    signal(SIGBUS, customSignalExceptionHandler);\n    signal(SIGPIPE, customSignalExceptionHandler);\n}\n")])])]),a("p",[t._v("注意 Debug 模式下 "),a("s",[t._v("Xcode 捕获异常的优先级更高")]),t._v(" Xcode屏蔽了Signal的回调，所以即使崩溃也不会走到我们注册的信号处理函数中去，两种解决方案")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在 LLDB 中通过命令 "),a("code",[t._v("pro hand -p true -s false SIGABRT")]),t._v(" 解除屏蔽，当然要在崩溃之前打断点输入命令，嫌麻烦的话可以 Edit BreakPoint 添加 Action。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lldb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" pro hand "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SIGABRT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAME")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PASS")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STOP")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOTIFY")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===========")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=====")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=====")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("======")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SIGABRT")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" \n")])])])]),t._v(" "),a("li",[a("p",[t._v("直接点击真机/模拟器对应 App 去启动，将崩溃信息写到沙盒里去看。")])])]),t._v(" "),a("p",[t._v("之前"),a("a",{attrs:{href:"https://fanthus.github.io/2024/03/10/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3-%E5%B4%A9%E6%BA%83%E7%B1%BB%E5%9E%8B/",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章"),a("OutboundLink")],1),t._v("的最后一段大致说了一下崩溃的原理，不论是什么崩溃底层都会产生对应的 Mach 异常，然后经过 BSD 层包装成信号的方式发出。")]),t._v(" "),a("p",[t._v("理论上 signal 信号处理的范围应该是更广的，能够包含 throw Exception 这种错误。但像是上面 "),a("code",[t._v("NSSetUncaughtExceptionHandler")]),t._v("  这种异常捕获机制并不会捕获到 "),a("code",[t._v("EXC_BAD_ACCESS")]),t._v(" 这种错误，因为 "),a("code",[t._v("EXC_BAD_ACCESS")]),t._v(" 不会产生异常，我自己理解像是 "),a("code",[t._v("EXC_BAD_ACCESS")]),t._v(" 这种内存错误应该是操作系统层面直接捕获生成了底层的 Mach Exception。")]),t._v(" "),a("p",[t._v("不管是 "),a("strong",[a("code",[t._v("NSUncaughtExceptionHandler")])]),t._v(" 还是注册 signal，如果在异常处理程序中不进行额外处理的话，程序还是会照样崩溃的，所以怎么让程序不崩溃呢？")]),t._v(" "),a("p",[t._v("可以在异常处理函数中加入如下代码来让程序异常之后继续运行")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFRunLoopRef")]),t._v(" runLoop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFRunLoopGetCurrent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFArrayRef")]),t._v(" allModes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFRunLoopCopyAllModes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("runLoop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("dismissed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("allModes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFRunLoopRunInMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFStringRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CFRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("allModes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("理论上这种场景只适合于应用 CRASH 之后，产品希望用户提交反馈，提交完闪退之后再进行崩溃。")]),t._v(" "),a("h2",{attrs:{id:"crash-防护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crash-防护"}},[t._v("#")]),t._v(" Crash 防护")]),t._v(" "),a("p",[t._v("异常捕获本质上当异常发生后进行的一些处理，现在有很多技术可以尽量避免异常的发生。比如"),a("a",{attrs:{href:"https://neyoufan.github.io/2017/01/13/ios/BayMax_HTSafetyGuard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("大白健康系统--iOS APP运行时Crash自动修复系统"),a("OutboundLink")],1),t._v("这篇文章里介绍的各种防护手段，这种防护手段本质上是通过 AOP Hook 的方式进行防护。")]),t._v(" "),a("p",[t._v("这里简单举几个例子来分析下防护原理")]),t._v(" "),a("h3",{attrs:{id:"方法不存在-unrecognized-selector-sent-to-instance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法不存在-unrecognized-selector-sent-to-instance"}},[t._v("#")]),t._v(" 方法不存在（Unrecognized Selector Sent to Instance）")]),t._v(" "),a("p",[t._v("粗糙的说当我们向一个实例发送它所属类不包含的实例方法的时候会报这个异常，当然实际的消息发送流程要比这个复杂，不仅要查找所属类的实例方法列表，还要沿着继承链不断向上找，最终还要开启消息转发机制。")]),t._v(" "),a("p",[t._v("防护的具体做法就是在消息转发的机制上进行 HOOK，回顾一下消息转发的三个节点")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("resolveInstanceMethod/resolveClassMethod")]),t._v(" 这两个方法是能够让类有机会动态添加实例/类方法。")]),t._v(" "),a("li",[a("code",[t._v("forwardingTargetForSelector")]),t._v(" 这个方法是原始类没有办法处理该方法的时候，我们可以提供一个其他的类来处理对应的消息，即将消息转发给其他的类(实例)。")]),t._v(" "),a("li",[a("code",[t._v("forwardInvocation")]),t._v(" 这个方法是运行时最后一次尝试找备援接收者，")])]),t._v(" "),a("p",[t._v("接下来思考的是应该在哪个节点去做 HOOK 来防范崩溃。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在第一个时间节点去进行 HOOK 的话，需要我们动态给类添加方法。")]),t._v(" "),a("p",[t._v("具体思路是 swizzle "),a("code",[t._v("NSObject")]),t._v(" 的 "),a("code",[t._v("resolveInstanceMethod")]),t._v(" API，然后在实现中将 "),a("code",[t._v("SEL")]),t._v(" 对应到一个 "),a("code",[t._v("NSObject")]),t._v(" 的空实例方法，替换方法如下，不过这种方式下在调用 "),a("code",[t._v("methodSignatureForSelector")]),t._v(" API 的时候会反复触发 "),a("code",[t._v("replaceResolveInstanceMethod")]),t._v(" 的 API 的执行，有点奇怪。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" originMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getClassMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolveInstanceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" replaceMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getClassMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("replaceResolveInstanceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replaceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BOOL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("replaceResolveInstanceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSMethodSignature")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" methodSignatureForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("sig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_addMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getMethodImplementation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emptyMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v@:@"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" replaceResolveInstanceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("emptyMethod "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"empty method"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果不使用 Swizzle 直接在 NSObject 的 Category 里用同名的方法 resolveInstanceMethod: 覆盖掉原始方法，感觉也不太合适。")]),t._v(" "),a("p",[t._v("剩下的方法就是在子类中复写 resolveInstanceMethod: ，方法实现参考上面的代码中的实现，但缺点是只有指定的类能处理方法找不到的场景。")])]),t._v(" "),a("li",[a("p",[t._v("第二个时间节点去进行 HOOK 的话，需要在我们要替换的方法 "),a("code",[t._v("replaceForwardingTargetForSelector:")]),t._v(" 里直接返回 nil，或者像下面一样生成一个专门用于接受各种消息的空方法。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" originMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forwardingTargetForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" replaceMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("replaceForwardingTargetForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replaceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//具体实现")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MsgProxy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msgProxy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@implementation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSObject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOOK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("load "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    msgProxy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MsgProxy")]),t._v(" new"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("replaceForwardingTargetForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aSelector "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSMethodSignature")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" sign "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" methodSignatureForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("aSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("sign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MsgProxy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emptyMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_addMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MsgProxy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getImplementation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getTypeEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" msgProxy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" replaceForwardingTargetForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("aSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@end")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("第三个时间节点去进行 HOOK 的话，需要同时 Swizzle 如下两个方法，参考 "),a("a",{attrs:{href:"https://github.com/jezzmemo/JJException/blob/master/JJExceptionPrinciple.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("JJException"),a("OutboundLink")],1),t._v(" 的做法")]),t._v(" "),a("div",{staticClass:"language-abap extra-class"},[a("pre",{pre:!0,attrs:{class:"language-abap"}},[a("code",[t._v("- "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMethodSignature *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("methodSignatureForSelector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aSelector\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("forwardInvocation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInvocation *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("anInvocation\n")])])]),a("p",[t._v("在 "),a("code",[t._v("methodSignatureForSelector:")]),t._v(" 的方法里，先看原类是否提供了方法签名，如果提供了的话，则用原类的方法签名，否则的话提供一个自定义的方法签名，JJException 里提供的方法签名是 "),a("code",[t._v('[NSMethodSignature signatureWithObjCTypes:"v@:@"]')]),t._v(" 这样的，但不用这个方法签名也行，也没找到作者为什么使用这个方法签名的原因。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("forwardInvocation:")]),t._v(" 方法里并不调用原类的 "),a("code",[t._v("forwardInvocation:")]),t._v(" 方法了，而是直接调用异常处理方法，打印错误堆栈信息以及后续处理，")])])]),t._v(" "),a("p",[t._v("不同的防护系统的 HOOK 时间节点也不同，像"),a("a",{attrs:{href:"https://neyoufan.github.io/2017/01/13/ios/BayMax_HTSafetyGuard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("大白健康系统--iOS APP运行时Crash自动修复系统"),a("OutboundLink")],1),t._v("这篇文章是在第二个时间节点去进行 HOOK 的，而 "),a("a",{attrs:{href:"https://github.com/jezzmemo/JJException/blob/master/JJExceptionPrinciple.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("JJExceptioin"),a("OutboundLink")],1),t._v(" 是在第三个时间节点去 HOOK 的。我感觉还是第三个时间点去做更好，越晚做这种 HOOK 越能减少对正常消息转发的干扰。")]),t._v(" "),a("h3",{attrs:{id:"集合类型防护-nsarray-nsdictionary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合类型防护-nsarray-nsdictionary"}},[t._v("#")]),t._v(" 集合类型防护（NSArray,NSDictionary）")]),t._v(" "),a("p",[t._v("两种异常类型，数组越界; key-value为nil。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("数组越界的解决方式。通过 HOOK 具体的集合的方法去解决，然后再新的替换方法里进行越界判断如果越界就直接处理异常并返回nil")]),t._v(" "),a("div",{staticClass:"language-abap extra-class"},[a("pre",{pre:!0,attrs:{class:"language-abap"}},[a("code",[t._v("swizzleInstanceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSClassFromString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('@"__NSArray0"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @selector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objectAtIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @selector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hookObjectAtIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" hookObjectAtIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" [self hookObjectAtIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("index];\n    "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("}")]),t._v("\n    handleCrashException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JJExceptionGuardArrayContainer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("[NSString stringWithFormat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('@"NSArray objectAtIndex invalid '),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("%tu total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('%tu"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("count")]),t._v("]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(";\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nil;\n"),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Swift 进行数组越界防护的时候，是通过添加下标(subscript)方法来方式越界的")])])]),t._v(" "),a("li",[a("p",[t._v("key-value 为 nil 的场景。也是通过HOOK 对应字典方法，判断 object 和 key，如果其中一个为 nil 就走异常处理逻辑。")]),t._v(" "),a("div",{staticClass:"language-abap extra-class"},[a("pre",{pre:!0,attrs:{class:"language-abap"}},[a("code",[t._v("swizzleInstanceMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSClassFromString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('@"__NSDictionaryM"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @selector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("forKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @selector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hookSetObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("forKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" hookSetObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("object forKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object "),a("span",{pre:!0,attrs:{class:"token string-operator keyword"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("{")]),t._v("\n        [self hookSetObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("object forKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("key];\n    "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token string-template string"}},[t._v(" else ")]),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("{")]),t._v("\n        handleCrashException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JJExceptionGuardDictionaryContainer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("[NSString stringWithFormat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('@"NSMutableDictionary setObject invalid '),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("%@ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('%@"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(";\n    "),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token token-operator punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("整体上 Crash 防护还是通过运行时机制进行的防护，这种方案对 Objective-C  生效，但是对于 Swift  的话作用不是很大。")]),t._v(" "),a("p",[t._v("但是 Crash 防护也会引起一些其他副作用，引起正常的功能运行异常，参考 JJException 的 issue 区。我自己感觉做 Crash 防护的时候可以配合一个服务器下发的开关，当有异常的时候直接通过用服务器开关来控制它的注入，但基本上都得下次启动才能生效了。")]),t._v(" "),a("p",[t._v("以上是我能想到的一些提升应用稳定性的方案，欢迎讨论。")]),t._v(" "),a("p",[t._v("参考地址:")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/Wuou/WOCrashProtector",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github-WOCrashProtector"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://neyoufan.github.io/2017/01/13/ios/BayMax_HTSafetyGuard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("大白健康系统--iOS APP运行时Crash自动修复系统"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/l5S_g1PBCiwm4KDtqNFb-A",target:"_blank",rel:"noopener noreferrer"}},[t._v("再谈 iOS App Crash 防护"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012-BAJGFBFB",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleGuide-Exception Programming Topics"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://shevakuilin.com/ios-crashprotection/",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈 iOS 中的 Crash 捕获与防护"),a("OutboundLink")],1),t._v("   #强烈推荐阅读这篇文章… 浅谈真是太谦虚了..")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6959015601536761893",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS Crash防护你看这个就够了-下篇"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/jezzmemo/JJException",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github-JJException"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);