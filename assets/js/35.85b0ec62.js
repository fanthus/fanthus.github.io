(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{398:function(t,a,e){t.exports=e.p+"assets/img/coredata_six_0.6c4f65c3.png"},399:function(t,a,e){t.exports=e.p+"assets/img/coredata_six_1.a4c8ea93.png"},400:function(t,a,e){t.exports=e.p+"assets/img/coredata_six_2.5c24a9e7.png"},639:function(t,a,e){"use strict";e.r(a);var s=e(5),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("这篇笔记主要是介绍 TableView+CoreData+iCloud 同步的技术细节。之前的"),a("a",{attrs:{href:"https://fanthus.github.io/2022/11/09/coredata%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("笔记"),a("OutboundLink")],1),t._v("已经介绍过如何在工程和代码中配置 CloudKit 同步了，这里不再赘述。")]),t._v(" "),a("h2",{attrs:{id:"coredata-icloud-同步机制说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coredata-icloud-同步机制说明"}},[t._v("#")]),t._v(" CoreData+iCloud 同步机制说明")]),t._v(" "),a("p",[t._v("CoreData 数据同步的具体流程其实"),a("a",{attrs:{href:"https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit/syncing_a_core_data_store_with_cloudkit",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1),t._v("说的比较清楚，登录了同样 iCloud 账号的 A、B 设备，系统会自动发送和接收内容改变，我们并不需要在工程上添加设备代码。具体流程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("用户在 A 设备上进行数据修改，"),a("code",[t._v("CoreData")]),t._v(" 将修改提交到 CloudKit")]),t._v(" "),a("p",[a("img",{attrs:{src:e(398),alt:"Untitled"}})])]),t._v(" "),a("li",[a("p",[t._v("CloudKit 收到修改然后将存储修改，并准备通知用户的其他设备，CoreData 会将数据保存到本地存储中。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(399),alt:"Untitled"}})])])]),t._v(" "),a("p",[t._v("数据层的同步基本上不用我们操心，但是涉及到视图相关的内容，我们还是需要做一些工作，想象一下 A、B 设备在同步数据，我在 A 设备上删除了一条数据，经过 "),a("code",[t._v("CloudKit")]),t._v(" 和 "),a("code",[t._v("CoreData")]),t._v(" 在后台的辛勤同步工作后，B 设备上对应的数据也删除了，但视图还没有更新，这时候我点击 B 设备上的这条被删除的数据视图想要查看数据详情，发现数据没了，这种情况并不是我们预期要见到的。所以怎么处理这种情况？官方给出的方案是隔离视图和数据存储层的改变，即数据存储层的改变不影响视图的展示。具体是使用 query generations，其实就是本地存储快照。")]),t._v(" "),a("p",[t._v("就是我们初始化 "),a("code",[t._v("NSPersistentCloudKitContainer")]),t._v(" 的时候，设置好快照为当前存储状态，当有新的数据同步下来的时候，比如删除行为同步到当前设备之后，你点开被删除的数据视图想要查看数据详情，这时候还是能看到的，本质上看到的是快照，而并非是最新的本地数据存储（官方的解释在这个文档 "),a("a",{attrs:{href:"https://developer.apple.com/documentation/coredata/accessing_data_when_the_store_changes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Accessing Data When the Store Changes"),a("OutboundLink")],1),t._v(" 里）这样我们就不会无缘无故出现底层数据被删除，视图层依然存在，导致交互的时候出现异常的情况了。")]),t._v(" "),a("p",[t._v("当调用下面这些方法的时候会自动更新快照：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("setQueryGenerationFrom(_:)")])]),t._v(" "),a("li",[a("code",[t._v("save()")])]),t._v(" "),a("li",[a("code",[t._v("mergeChanges(fromContextDidSave:)")])]),t._v(" "),a("li",[a("code",[t._v("mergeChanges(fromRemoteContextSave:into:)")])]),t._v(" "),a("li",[a("code",[t._v("reset()")])])]),t._v(" "),a("p",[t._v("在具体实操的时候遇到一点小问题，在初始化 "),a("code",[t._v("NSPersistentCloudKitContainer")]),t._v(" 实例的时候，按照官方文档设置 query generation 发现异常崩溃了 "),a("code",[t._v("Unsupported feature in this configuration")]),t._v(" ，为啥呢？CoreData 创建 Sqlite 存储的模式默认是 wal，我打印出来日志是 memory，是因为我初始化 "),a("code",[t._v("NSPersistentStoreDescription")]),t._v(" 的时候没有传本地文件路径，所以用的是内存中的数据库，设置好本地文件路径就 OK 了。")]),t._v(" "),a("h2",{attrs:{id:"对-automaticallymergeschangesfromparent-属性的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-automaticallymergeschangesfromparent-属性的理解"}},[t._v("#")]),t._v(" 对 automaticallyMergesChangesFromParent  属性的理解")]),t._v(" "),a("p",[t._v("我最开始对这个属性理解是，当设置此属性为 true 的时候，主上下文变动会同步到子上下文，反之为 false 的时候主上下文不会同步到子上下文。于是写了简单的demo验证")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.现有包含主上下文 mainContext")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.我创建一个私有主上下文 privateContext")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.将 privateContext 的 parent 设置为 mainContext")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4.将私有主上下文的 automaticallyMergesChangesFromParent 设置为 false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5.我预期的结果是：当 mainContext 发生变动的时候，比如插入一条数据，privateContext 并不会获取到这条数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" mainContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppDelegate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shareInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("persistentContainer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("viewContext\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" privateContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSManagedObjectContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("concurrencyType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("privateQueueConcurrencyType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nprivateContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mainContext\nprivateContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("automaticallyMergesChangesFromParent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" book "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Book")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mainContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" id\nbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" mainContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//主上下文存储")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    privateContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("perform "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("weak")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("guard")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" wself "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bookFetchRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSFetchRequest")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Book")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Book")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" books "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" wself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("privateContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bookFetchRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"private books ')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("books")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"private context fetch data insert error: ')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("最后执行代码发现上面的预期的结果没有成立")]),t._v("，"),a("code",[t._v("automaticallyMergesChangesFromParent")]),t._v(" 这个属性对结果似乎没有任何影响。这是为啥？没想明白，于是去肘子老师的 "),a("a",{attrs:{href:"https://discord.gg/X7B5hBC9",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discord"),a("OutboundLink")],1),t._v(" 群里问了问，得到的解释是因为 privateContext 是从持久化存储中获取的数据，所以可以获取到最新的数据。")]),t._v(" "),a("p",[t._v("而且我对这个属性的理解是根本错误的，"),a("code",[t._v("automaticallyMergesChangesFromParent")]),t._v(" 这个属性和 context 的 parent 属性根本没什么关系。只要两个 context 共享一个持久化存储协调器(persistent store coordinator)或者 "),a("code",[t._v("NSPersistentContainer")]),t._v("，尽管这俩 context 没有 parent 关系，也会自动合并改变。所以感觉 "),a("code",[t._v("automaticallyMergesChangesFromParent")]),t._v(" 这个命名有点让人歧义。")]),t._v(" "),a("p",[t._v("在 iCloud 同步中，当系统维护的同步上下文处理同步数据的时候，主上下文如果开启 "),a("code",[t._v("automaticallyMergesChangesFromParent")]),t._v(" 则会自动更新其中有变化的内容。而并不是我之前理解的主上下文的 parent 是系统维护的同步上下文。StackOverflow 里的"),a("a",{attrs:{href:"https://stackoverflow.com/questions/66784854/what-parent-is-viewcontext-referring-to-when-viewcontext-automaticallymergescha",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个问题"),a("OutboundLink")],1),t._v("对"),a("code",[t._v("automaticallyMergesChangesFromParent")]),t._v(" 解释的也很好。")]),t._v(" "),a("blockquote",[a("p",[t._v("If the parent is nil, it's nil, there's no implicit parent relationship. When the parent context is nil, "),a("code",[t._v("automaticallyMergesChangesFromParent")]),t._v("\n automatically merges changes saved to its persistent store coordinator. It's not a parent context but it does some parent context-like things here. As long as the two contexts use the same persistent store coordinator (or the same "),a("code",[t._v("NSPersistentContainer")]),t._v("\n) then this will automatically merge changes without a parent context relationship.")])]),t._v(" "),a("h2",{attrs:{id:"icoud-同步开关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#icoud-同步开关"}},[t._v("#")]),t._v(" iCoud 同步开关")]),t._v(" "),a("p",[t._v("iCloud 同步开关的设置，现在很多使用 CoreData+iCloud 方案开发者都会在应用内部提供关闭数据开关的入口。要区分系统 iCloud 同步开关和应用内同步开关的作用。")]),t._v(" "),a("p",[t._v("如果是关闭了系统的 iCoud 同步则会从系统层面禁止本地数据和 iCloud 同步，系统内所有应用都会停止数据同步，并且 "),a("code",[t._v("NSPersistentCloudContainer")]),t._v(" 也会自动删除应用数据库中的所有数据。如果有关闭 iCloud 照片同步经验的朋友应该知道，当你关闭 iCoud 照片同步的时候会给你提供两个选项，可以从 iPhone 中移除，也可以可以下载。对于普通应用来说并没有给你选择的权利，而是直接给你删除，相当于你选择了「从 iPhone 移除」的选项。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(400),alt:"Untitled"}})]),t._v(" "),a("p",[t._v("所以很多类似的 App 提供了 App 内数据同步的选项，这样用户可以在不关闭系统 iCloud 同步的情况下关闭当前 App 的数据同步。如何实现呢？两种实现方式")]),t._v(" "),a("ul",[a("li",[t._v("非实时切换")]),t._v(" "),a("li",[t._v("实时切换")])]),t._v(" "),a("p",[t._v("区别在于开启或者关闭同步开关之后，是否需要重新启动应用。接下来只是说明非实时切换的做法和原理，实时切换的原理和具体做法可以参考肘子老师的这篇文章"),a("a",{attrs:{href:"https://www.fatbobman.com/posts/real-time-switching-of-cloud-syncs-status/",target:"_blank",rel:"noopener noreferrer"}},[t._v("实时切换 Core Data 的云同步状态"),a("OutboundLink")],1),t._v("，写的非常清楚。")]),t._v(" "),a("p",[t._v("非实时切换的做法其实很简单就是本地存储开关变量，启动时候判断开关，如果是开的话就设置 "),a("code",[t._v("NSPersistentStoreDescription")]),t._v(" 的 "),a("code",[t._v("cloudKitContainerOptions")]),t._v(" 属性为 "),a("code",[t._v("NSPersistentCloudKitContainerOptions")]),t._v(" 实例，这样可以把本地存储和云端 container 关联起来进行 iCloud 同步，否则就不设置这个属性就 OK。")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lazy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSPersistentCloudKitContainer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" container "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSPersistentCloudKitContainer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Model"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" enableMirror "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDefaults")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("standard"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"enableMirror"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" enableMirror "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("persistentStoreDescriptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cloudKitContainerOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("containerIdentifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YourCloudKitContainerID"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loadPersistentStores"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" desc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("error "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" container\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"部署相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署相关"}},[t._v("#")]),t._v(" 部署相关")]),t._v(" "),a("p",[t._v("参考地址:")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://developer.apple.com/documentation/coredata/mirroring_a_core_data_store_with_cloudkit/syncing_a_core_data_store_with_cloudkit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guide-Syncing a Core Data Store with CloudKit"),a("OutboundLink")],1),t._v("   #数据同步的大致介绍")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guide-Consuming Relevant Store Changes"),a("OutboundLink")],1),t._v("   #")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.apple.com/documentation/coredata/synchronizing_a_local_store_to_the_cloud",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apple Sample Code Demo-Synchronizing a local store to the cloud"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6994244745958522887",target:"_blank",rel:"noopener noreferrer"}},[t._v("Core Data with CloudKit（二）——同步本地数据库到iCloud私有数据库"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.fatbobman.com/posts/real-time-switching-of-cloud-syncs-status/",target:"_blank",rel:"noopener noreferrer"}},[t._v("实时切换 Core Data 的云同步状态"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/66784854/what-parent-is-viewcontext-referring-to-when-viewcontext-automaticallymergescha",target:"_blank",rel:"noopener noreferrer"}},[t._v("What parent is viewContext referring to, when viewContext.automaticallyMergesChangesFromParent set to true?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://cocoacasts.com/what-are-core-data-query-generations",target:"_blank",rel:"noopener noreferrer"}},[t._v("What Are Core Data Query Generations"),a("OutboundLink")],1),t._v("    #第三方关于 QueryGeneration 的说明，带图文，很直观")])]),t._v(" "),a("Vssue",{attrs:{title:t.CoreData学习笔记_6}})],1)}),[],!1,null,null,null);a.default=n.exports}}]);