(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{572:function(t,s,a){t.exports=a.p+"assets/img/Untitled.92a8de3e.png"},699:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本文尝试回答 static 关键字的区别")]),t._v(" "),s("ul",[s("li",[t._v("Objective-C 中 static 修饰的变量存储的位置？")]),t._v(" "),s("li",[t._v("OC 全局静态变量和局部静态变量的区别？")]),t._v(" "),s("li",[t._v("OC 全局静态变量和全局变量的区别？")]),t._v(" "),s("li",[t._v("static 关键字在 OC 和 Swift 中的区别？")]),t._v(" "),s("li",[t._v("Swift 中 static 修饰的类属性存储的位置？")]),t._v(" "),s("li",[t._v("static 变量和 macho文件的关系？")])]),t._v(" "),s("p",[t._v("OC 中的 "),s("code",[t._v("static")]),t._v(" 关键字是引用自 C 语言。被 "),s("code",[t._v("static")]),t._v(" 修饰的变量被成为静态变量，主要影响变量的生命周期，被 "),s("code",[t._v("static")]),t._v(" 修饰的变量是存储在内存的静态存储区。")]),t._v(" "),s("blockquote",[s("p",[t._v("与 "),s("code",[t._v("static")]),t._v(" 相对的，变量还可能存储在栈上和堆上，栈上的内存是编译器管理的，堆上的内存是运行时动态分配的。")])]),t._v(" "),s("p",[s("code",[t._v("static")]),t._v(" 修饰的变量的生命周期就是程序进程的生命周期。但是 "),s("code",[t._v("static")]),t._v(" 修饰变量的作用域是根据变量声明的位置变化而变化。")]),t._v(" "),s("p",[t._v("这里就涉及到全局静态变量和局部静态变量的区分")]),t._v(" "),s("h3",{attrs:{id:"全局静态变量-vs-局部静态变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局静态变量-vs-局部静态变量"}},[t._v("#")]),t._v(" 全局静态变量 vs 局部静态变量")]),t._v(" "),s("p",[t._v("不论是静态全局变量还是局部静态变量，变量的生命周期是没有区分的，"),s("strong",[t._v("主要区别在于作用域的区别。")])]),t._v(" "),s("p",[t._v("在下面的例子中，我们声明了一个局部静态变量，每次点击按钮的时候会让 "),s("code",[t._v("i")]),t._v(" 在原值基础上加一。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("tap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sender "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" int i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义局部静态变量")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i=%d"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ni"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\ni"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\ni"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),s("p",[t._v("说明变量 "),s("code",[t._v("i")]),t._v(" 并没有像普通的自动变量一样，内存生命周期随着函数的调用结束而结束，而是一直存在着，但是 "),s("code",[t._v("i")]),t._v(" 的作用域范围仅限在在 "),s("code",[t._v("tap")]),t._v(" 函数之内，出了这个函数我们就访问不到 "),s("code",[t._v("i")]),t._v(" 了。")]),t._v(" "),s("p",[t._v("我们定义全局静态变量的话是能让别的方法也能访问到这个变量，但是这里要重新梳理下全局的概念，下面两个例子有助于梳理在不同位置定义全局变量。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在 .h 文件定义全局静态变量，那其他类引用静态全局变量所在类头文件后可以访问。")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//B.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//B.m")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" B\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("getNameFromA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里访问的即为 A.h中定义的name")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在 .m 文件定义全局静态变量，那就是只有在 .m 文件里方法能访问该变量。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@implementation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" int i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("increse "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("readi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token attribute atrule"}},[t._v("@end")]),t._v("\n")])])])])]),t._v(" "),s("p",[t._v("多说一句，我在网上看了一些"),s("a",{attrs:{href:"https://stackoverflow.com/questions/2271902/static-vs-global",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1),t._v("，发现有人说 C 语言 static 修饰的全局静态变量，其他源文件不能访问。我自己试了试发现不是这样啊，C 和 OC 中 static 修饰符修饰静态全局变量的使用方式基本上一样；如果全局静态变量定义在 C 语言的 .h 文件中，其他的 C 语言源文件通过 .h 文件的引入，也能读取到对应的变量；当然你如果像 OC 一样把全局静态变量的定义放到 .m 里一样，放到 C 语言的 .c 文件里，别的文件当然就没办法读取到了。")]),t._v(" "),s("h3",{attrs:{id:"全局静态变量和全局变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局静态变量和全局变量"}},[t._v("#")]),t._v(" 全局静态变量和全局变量")]),t._v(" "),s("p",[t._v("我自己理解全局静态变量和全局变量在存储的位置并没有什么不同，都是存储在全局静态区，但是两者的使用方式是不同的。")]),t._v(" "),s("p",[t._v("我们上面已经说了全局静态变量在 .h 和 .m 中的定义方式和作用范围，同样我们也尝试声明全局变量在不同文件中的访问方式。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在 .h 文件中定义")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A.h")]),t._v("\nNSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"global hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//B.m")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" B\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("getNameFromA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这种情况下编译报错 "),s("code",[t._v("duplicate symbol '_name' in: A.o 和 B.o")]),t._v("，原因其实很简单，#import “A.h” 的时候本质上重新声明了一遍 "),s("code",[t._v("name")]),t._v(" 变量。所以编译报错。"),s("strong",[t._v("这是和全局静态变量的区别，全局静态变量在这种情况下不会出现问题。")])])]),t._v(" "),s("li",[s("p",[t._v("在 .m 文件中定义，如下，这种场景下我理解全局静态变量定义和全局变量的作用基本上一样的。")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A.m")]),t._v("\nNSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"global hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" A\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("modifyName "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"new global hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("getName "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),s("p",[t._v("如果我们想让外部文件也访问到此全局变量 "),s("code",[t._v("name")]),t._v("，我们需要在 .h 文件中添加 extern 声明")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A.m")]),t._v("\nNSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"global hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A.h")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//B.m")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("getNameFromA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setNameToA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"set name to a from b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("如果想将此变量定义为常量的化，则使用 "),s("code",[t._v('NSString * const name = @"global hello";')]),t._v(" 这种声明方式。")])])])]),t._v(" "),s("h3",{attrs:{id:"static-关键字在-oc-和-swift-中的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-关键字在-oc-和-swift-中的区别"}},[t._v("#")]),t._v(" static 关键字在 OC 和 Swift 中的区别？")]),t._v(" "),s("p",[t._v("OC 中 static 关键字就表示定义全局静态变量或静态方法。在 Swift 中 static 关键字用于修饰类属性。比如")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("class A "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" var a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应到 OC 这种类属性的写法如下，这种写法是从 "),s("code",[t._v("iOS 10")]),t._v(", "),s("code",[t._v("Xcode 8")]),t._v(" 才开始支持的。")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自己实现getter/setter方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),s("p",[t._v("至于 "),s("code",[t._v("swift")]),t._v(" 中 "),s("code",[t._v("static")]),t._v(" 变量存储的位置，参考了一些"),s("a",{attrs:{href:"https://varun04tomar.medium.com/open-nuts-and-bolts-of-memory-management-in-ios-swift-part-1-4927b60fccf8",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1),t._v("，应该也是存储在全局静态区的，一样是整个生命周期有效的。")]),t._v(" "),s("p",[t._v("所以 "),s("code",[t._v("static")]),t._v(" 关键字在 OC 和 Swift 中只是使用的语义不同，但对应的存储位置还是一样的。")]),t._v(" "),s("h3",{attrs:{id:"实战一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战一下"}},[t._v("#")]),t._v(" 实战一下")]),t._v(" "),s("p",[t._v("**全局变量为值类型，**通过如下 DEMO 验证：")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxx"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("查看 "),s("code",[t._v("A.a")]),t._v(" 的内存地址如下 "),s("code",[t._v("100008140")]),t._v(", 78 是  x 的 ASCII 码值。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(572),alt:"Untitled"}})]),t._v(" "),s("p",[t._v("重新导出 memorygraph 文件，通过 "),s("code",[t._v("vmmap --verbose TerminalToolSwiftDemo.memgraph")]),t._v(" 命令打印出来内存区间，发现 "),s("code",[t._v("A.a")]),t._v(" 的内存地址 "),s("code",[t._v("100008140")]),t._v(" 落在了 "),s("code",[t._v("__DATA")]),t._v(" 区间上，确实是在静态区。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("====")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Writable")]),t._v(" regions "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" process "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("56120")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REGION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),t._v("                    "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("START")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("END")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VSIZE")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RSDNT")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DIRTY")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SWAP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PRT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHRMOD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PURGE")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REGION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DETAIL")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("__DATA")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100008000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("10000c000    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("   16K    16K    16K     0K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" rw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-/")]),t._v("rw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SM")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COW")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TerminalToolSwiftDemo")]),t._v("\n")])])]),s("p",[s("strong",[t._v("全局变量为引用类型")]),t._v("，通过如下 DEMO 验证：")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("导出 memgraph 文件之后，打印实例的内存地址之后发现类属性 "),s("code",[t._v("A.a")]),t._v(" 的地址特别高 "),s("code",[t._v("0x60000000c840")]),t._v(" 在 "),s("code",[t._v("MALLOC_NANO")]),t._v(" 内存区域里，并不在全局静态区里，因为感觉全局静态区是内存地址比较低的地方，而这个内存区域是用来分配特别小的对象。在想通过设置环境变量 "),s("code",[t._v("MallocNanoZone")]),t._v(" 为 0 关掉这个特性，"),s("a",{attrs:{href:"https://stackoverflow.com/questions/64126942/malloc-nano-zone-abandoned-due-to-inability-to-preallocate-reserved-vm-space",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考这里"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("关掉之后发现 "),s("code",[t._v("A.a")]),t._v(" 变量在 "),s("code",[t._v("MALLOC_TINY")]),t._v(" 这个内存区域里，感觉全局静态区，应该是在 "),s("code",[t._v("__DATA")]),t._v(" 这个 "),s("code",[t._v("Region Type")]),t._v(" 里的，为什么是在 "),s("code",[t._v("MALLOC_TINY")]),t._v(" 里？")]),t._v(" "),s("p",[t._v("我通过如下方式打印了下 "),s("code",[t._v("A.a")]),t._v(" 变量本身的地址，得到结果 "),s("code",[t._v("0x0000000100008140")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withUnsafeMutablePointer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token short-argument"}},[t._v("$0")])]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("发现指针本身的位置是在全局静态区，指针指向的位置是堆区。我感觉是因为 A 还是一个对象，需要通过 "),s("code",[t._v("malloc")]),t._v(" 分配，可能没办法"),s("a",{attrs:{href:"https://www.gnu.org/software/libc/manual/html_node/Memory-Allocation-and-C.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("静态分配"),s("OutboundLink")],1),t._v("内存。所以是这样的结果。")]),t._v(" "),s("p",[t._v("总结一下，当全局静态变量存储的变量为值类型的时候，值的内容也是存处在全局静态区；当全局静态变量存储的变量为引用类型的时候，真实对象存储的位置在堆上。")]),t._v(" "),s("h3",{attrs:{id:"static-变量和-macho文件的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-变量和-macho文件的关系"}},[t._v("#")]),t._v(" static 变量和 macho文件的关系")]),t._v(" "),s("p",[t._v("没有直接的关系。理解这个问题需要知道macho和虚拟内存的映射关系。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("static")]),t._v(" 通过某个常量初始化的化，则该常量的存储位置在 "),s("code",[t._v("mach-o")]),t._v(" 文件的 "),s("code",[t._v("__DATA")]),t._v(" 段，这个 "),s("code",[t._v("_DATA")]),t._v(" 段本质上也是映射到内存的全局静态区。")]),t._v(" "),s("p",[t._v("如果静态变量没有初始化的话，则会给变量在 "),s("code",[t._v(".bss")]),t._v(" 段预留容量，最终也是映射到全局静态区，但是我们一定得知道静态变量的类型，否则没办法知道到底分配多大内存。"),s("code",[t._v("Swift")]),t._v(" 中的类属性是一定要初始化好的。")]),t._v(" "),s("blockquote",[s("p",[t._v("Unlike stored instance properties, you must always give stored type properties a default value. This is because the type itself doesn’t have an initializer that can assign a value to a stored type property at initialization time.")])]),t._v(" "),s("p",[t._v("以上如果有理解的不对的地方，欢迎指出来，有疑问也可以一起讨论一下")]),t._v(" "),s("p",[t._v("参考地址:")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/lanhaicode/p/10633125.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("extern——关键字"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://varun04tomar.medium.com/open-nuts-and-bolts-of-memory-management-in-ios-swift-part-1-4927b60fccf8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Open Nuts and Bolts of Memory Management in iOS : Swift Part 1"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Performance/Conceptual/ManagingMemory/Articles/MemoryAlloc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Memory Usage Performance Guidelines-Tips for Allocating Memory"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/379615733",target:"_blank",rel:"noopener noreferrer"}},[t._v("Xcode的vmmap、VM_Tracker和Allocations的调研笔记"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Type-Properties",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift-Type Properties"),s("OutboundLink")],1)])]),t._v(" "),s("Vssue",{attrs:{title:"2024-02-27-关于static"}})],1)}),[],!1,null,null,null);s.default=n.exports}}]);