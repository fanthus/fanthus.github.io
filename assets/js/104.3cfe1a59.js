(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{647:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("iOS 开发中经常遇到的数据类型转换发生在网络请求回来的时候，字符串转成 Foudation Object（比如 Dictionary 或者 Array）然后再转换成我们定义好的 Model 类型，一般来说就是 JSON 转 Model。")]),t._v(" "),a("h2",{attrs:{id:"objective-c-时代的解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objective-c-时代的解决方案"}},[t._v("#")]),t._v(" Objective-C 时代的解决方案")]),t._v(" "),a("p",[t._v("之前使用 Objective-C 进行开发的时候，OC 并没有提供对 JSON 转化成 Model 很好的支持。我们手动进行转换的时候通常要自己手写一些转换的方法，比如")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NSObject\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("fromDict"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n@end\n\n@implementation Student\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("fromDict"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("dict "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Student "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n@end\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//完整的转化过程 String -> Foundation Object -> Model")]),t._v("\nNSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{\\"name\\":\\"fanthus\\"}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("jsonData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("string dataUsingEncoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("NSUTF8StringEncoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSJSONSerialization JSONObjectWithData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("jsonData options"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("NSJSONReadingAllowFragments error"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nStudent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("stu "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Student fromDict"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name %@"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("stu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上面的代码里我们是通过 "),a("code",[t._v("NSJSONSerialization")]),t._v(" 类将 JSON Data 转化为 Foundation Object的，将 Foundation Object 转化为 JSON Data 的时候也是通过 "),a("code",[t._v("NSJSONSerialization")]),t._v(" 这个类，只不过 API 变成了 "),a("code",[t._v("+ (nullable NSData *)dataWithJSONObject:(id)obj options:(NSJSONWritingOptions)opt error:(NSError **)error;")]),t._v("。"),a("code",[t._v("NSJSONSerialization")]),t._v(" 本身并没有直接参与到 Model 和 Foundation 的转换过程中。")]),t._v(" "),a("p",[t._v("但是这样进行 Foundation Object 和 Model 的转换就非常的麻烦，每个 Model 都需要实现一遍转换逻辑，非常的麻烦，于是涌现出了很多解决这种问题的库，比如 "),a("a",{attrs:{href:"https://github.com/CoderMJLee/MJExtension",target:"_blank",rel:"noopener noreferrer"}},[t._v("MJExtension"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"https://github.com/ibireme/YYModel",target:"_blank",rel:"noopener noreferrer"}},[t._v("YYModel"),a("OutboundLink")],1),t._v(" 等这样库。")]),t._v(" "),a("h2",{attrs:{id:"swift-时代的解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift-时代的解决方案"}},[t._v("#")]),t._v(" Swift 时代的解决方案")]),t._v(" "),a("p",[t._v("Swift 引入了 Codable 协议，目的就是简化 JSON 和 Model 转换的难度。比如下面这种")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("struct Student"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Codable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("String\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//JSON->Model")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{\\"name\\":\\"fanthus\\"}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("using"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Model->JSON")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" JSONSerialization"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("原生的 "),a("code",[t._v("JSONEncoder")]),t._v(" 就能直接很方便的进行转化了。我们只需要让我们的 Model 类型遵守 "),a("code",[t._v("Encodable")]),t._v(" 和 "),a("code",[t._v("Decodable")]),t._v(" 协议。只要 Model 类型的所有属性是 "),a("code",[t._v("Codable")]),t._v(" 的，那我们类型就不用做额外的工作，比如 "),a("code",[t._v("Student")]),t._v(" 的 name 属性类型是 "),a("code",[t._v("String")]),t._v("，"),a("code",[t._v("String")]),t._v(" 类型是 "),a("code",[t._v("Codable")]),t._v(" 的，所以 "),a("code",[t._v("Student")]),t._v(" 就直接声明遵守 "),a("code",[t._v("Codable")]),t._v(" 协议就好了。当然我们自定义类型的属性，只要自定义类型符合 "),a("code",[t._v("Codable")]),t._v(" 协议，那类型也是自动遵守 "),a("code",[t._v("Codable")]),t._v(" 协议的。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Codable")]),t._v(" 协议是 "),a("code",[t._v("Encodable")]),t._v(" 和 "),a("code",[t._v("Decodable")]),t._v(" 的组合 "),a("code",[t._v("public typealias Codable = Decodable & Encodable")])])]),t._v(" "),a("p",[a("code",[t._v("Codable")]),t._v(" 还引入了 "),a("code",[t._v("CodingKeys")]),t._v(" 枚举来实现对某些属性编码忽略以及对编解码用到的别名的支持。CodingKeys 本质上就是一个属性验证列表，包含在内的属性就会被编解码，反之不会。比如下面这种场景：")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("struct Student"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Codable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("String\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("score")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//score 被 CodingKeys 忽略之后需要提供初始值.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("classroom")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("CodingKeys")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CodingKey "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" classroom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"class_room"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{\\"name\\":\\"fanthus\\",\\"class_room\\":1}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("using"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//打印结果: Student(name: "fanthus", score: 0, classroom: 1)')]),t._v("\n")])])]),a("p",[t._v("总的来说，原生的 "),a("code",[t._v("Codable")]),t._v("  就能解决我们日常 JSON 转 Model 的场景。")]),t._v(" "),a("p",[t._v("但是有的场景用起来还是不舒服，"),a("s",[t._v("比如上面 json 字符串里面如果少了 "),a("code",[t._v("class_room")]),t._v(" 字段的话，解析就会发生异常了，就算是给 "),a("code",[t._v("classroom")]),t._v(" 属性提供默认值也有问题（直接将 classroom 属性设置为 optional 就好了）")]),t._v("。所以出现很多新的库来满足更加定制化的转化需求，比如 "),a("a",{attrs:{href:"https://github.com/alibaba/HandyJSON",target:"_blank",rel:"noopener noreferrer"}},[t._v("HandyJSON"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/kakaopensource/KakaJSON",target:"_blank",rel:"noopener noreferrer"}},[t._v("KakaJSON"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("我有的项目用的是 HandyJSON，但是 HandyJSON 用到了非常底层的 Swift 语言机制，导致如果系统升级底层有变动的话，就会导致序列化失败，程序崩溃，至今 HandyJSON 的 issue 区还有"),a("a",{attrs:{href:"https://github.com/alibaba/HandyJSON/issues/442",target:"_blank",rel:"noopener noreferrer"}},[t._v("类似的问题"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("综上，想要有完美的解决方案是不行的，感觉 Swift 还是需要再完善一下对 "),a("code",[t._v("Codable")]),t._v(" 的支持，让它能兼容更多的场景这样就更好了。")]),t._v(" "),a("p",[t._v("参考地址:")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types",target:"_blank",rel:"noopener noreferrer"}},[t._v("Encoding and Decoding Custom Types"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6971997599725256734",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift - Codable 使用小记"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/351928579?ivk_sa=1024320u",target:"_blank",rel:"noopener noreferrer"}},[t._v("2021 年了，Swift 的 JSON-Model 转换还能有什么新花样"),a("OutboundLink")],1)])]),t._v(" "),a("Vssue",{attrs:{title:t.iOS开发中JSON-t.Model转化}})],1)}),[],!1,null,null,null);a.default=e.exports}}]);