(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{497:function(t,e,s){t.exports=s.p+"assets/img/Untitled.79a8d101.png"},498:function(t,e,s){t.exports=s.p+"assets/img/Untitled_1.10586548.png"},499:function(t,e,s){t.exports=s.p+"assets/img/Untitled_2.81080d8c.png"},500:function(t,e,s){t.exports=s.p+"assets/img/Untitled_3.6667388d.png"},689:function(t,e,s){"use strict";s.r(e);var a=s(5),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("RouterLink",{attrs:{to:"/_posts/2023-09-14-后端学习笔记-搭建SpringBoot后端项目.html"}},[t._v("上篇笔记")]),t._v("学习了下如何从零到一搭建 SpringBoot 后端项目，在实现代码的部分发现有很多Java 的注解，想要搞清楚这些注解的目的、以及这个项目是怎么跑起来的？SpringBoot 到底是个啥？")],1),t._v(" "),e("p",[t._v("这篇文章就是记录一下认识这个新建后端项目的过程。")]),t._v(" "),e("p",[t._v("当 SpringBoot 项目运行起来之后，我们会在终端看到几行日志，如下")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("embedded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tomcat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("TomcatWebServer")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tomcat")]),t._v(" initialized "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catalina"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("StandardService")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Starting")]),t._v(" service "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tomcat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catalina"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("StandardEngine")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Starting")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Servlet")]),t._v(" engine"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Apache")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tomcat")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".70")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("这里说启动了 TomCat，TomCat 是啥？这里引出了一系列的基础概念")]),t._v(" "),e("h2",{attrs:{id:"一些基础概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些基础概念"}},[t._v("#")]),t._v(" 一些基础概念")]),t._v(" "),e("h3",{attrs:{id:"tomcat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[t._v("#")]),t._v(" TomCat")]),t._v(" "),e("p",[t._v("Tomcat 是一个开源的 Java Servlet 容器，也是一个用于构建和运行 Java Web 应用程序的 Web 服务器。它由 Apache 软件基金会开发和维护，是一个非常流行的用于部署和管理 Java Web 应用程序的工具之一。")]),t._v(" "),e("p",[t._v("那问题来了？Java  Servlet 是啥？")]),t._v(" "),e("h3",{attrs:{id:"java-servlet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-servlet"}},[t._v("#")]),t._v(" Java Servlet")]),t._v(" "),e("p",[t._v("Java Servlet(简称 Servlet) 的官方定义是用"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Java",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java"),e("OutboundLink")],1),t._v("编写的"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("服务器"),e("OutboundLink")],1),t._v("端"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序"),e("OutboundLink")],1),t._v("。其主要功能在于交互式地浏览和修改数据，生成动态 web 内容。**本质上其实就是一个遵循 Servlet 标准开发的 Java 类，**我自己理解 Servlet 标准有点类似编程中的「接口」的概念，实时上真实的编程世界也是这样做的")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Servlet")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletConfig")]),t._v(" var1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletConfig")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServletConfig")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" var1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" var2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServletInfo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Servlet 有生命周期的概念，在生命周期内，构造初始化(init)和释放(destory)对象的方法都只调用一次，业务方法(service)会执行很多次。我理解其实就是服务器启动之后，可以不断的接受来自客户端的请求，当服务器关闭后就不再接收请求了。")]),t._v(" "),e("p",[t._v("Servlet 是由服务器调用的，运行在服务器端。Servlet 带给我们最大的作用就是能够处理浏览器带来 HTTP 请求，并返回一个响应给浏览器，从而实现浏览器和服务器的交互。")]),t._v(" "),e("p",[t._v("后续提到的 "),e("code",[t._v("HTTPServlet")]),t._v("，它其实就是继承了 Servlet，实现了 "),e("code",[t._v("service")]),t._v(" 方法，根据 HTTP 请求方法(GET/POST)等来执行不同的逻辑。")]),t._v(" "),e("p",[t._v("贴一段 "),e("code",[t._v("HTTPServlet")]),t._v(" 实现 service 的方法，以及 "),e("code",[t._v("HttpServletRequest")]),t._v(" 的部分定义，如下")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// HTTPServlet.clas ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        request "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        response "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassCastException")]),t._v(" var6"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lStrings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http.non_http"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" var1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPathInfo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueryString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Web 服务器已经把 HTTP 请求(如下一段纯文本)解析成了 "),e("code",[t._v("HttpServletRequest")]),t._v(" 对象，让我们方便在 "),e("code",[t._v("service")]),t._v(" 业务方法里面操作，"),e("strong",[t._v("我们可以在 "),e("code",[t._v("service")]),t._v(" 方法里面加入自己的逻辑，来根据收到的请求返回不同的数据。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//HTTP 请求样例\nGET /servlet/hello?username=fanthus HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\nAccept-Language: zh-CN,zh;q=0.9\nCookie: Hm_lvt_82116c626a8d504a5c0675073362ef6f=1585269393,1585357421,1586488037,1586738782\n")])])]),e("h3",{attrs:{id:"tomcat-和-servlet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-和-servlet"}},[t._v("#")]),t._v(" Tomcat 和 Servlet")]),t._v(" "),e("p",[t._v("Servlet 容器和 Web 应用服务器其实是一个东西，而 TomCat 算是 Web 应用服务器的一种，所以 Tomcat 定义里会有「Tomcat 是一个开源的 Java Servlet 容器」这句话。")]),t._v(" "),e("p",[t._v("具体实现上是 "),e("strong",[t._v("Tomcat 管理了 Servlet 的生命周期")]),t._v("，是 Tomcat 通过根据反射的方式创建了 Servlet 类实例，然后在接收到请求时执行 Servlet 业务方法(service)，关闭 Tomcat 的时候调用 destroy 方法，释放当前对象占用的资源。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(497),alt:"Untitled"}})]),t._v(" "),e("p",[t._v("我们目前的项目里 SpringBoot 是基于 Tomcat Web 服务器的，但是似乎没有看到项目和 Servlet 的关系，等等，SpringBoot 究竟是什么东西？")]),t._v(" "),e("h3",{attrs:{id:"spring-boot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[t._v("#")]),t._v(" Spring Boot")]),t._v(" "),e("p",[t._v("Spring Boot 可以轻松创建独立的、生产级的基于 Spring 的应用程序，让用户可以一键安装运行。")]),t._v(" "),e("p",[t._v("那么问题又来了，Spring 是什么？")]),t._v(" "),e("h3",{attrs:{id:"spring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),e("p",[t._v("Spring 框架是 Java 平台的一个开源的全栈应用程序框架和控制反转容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用。我自己感觉 Spring 就是一个通用的 Java 库，开发任何 Java 相关的程序都可以用 Spring 框架。")]),t._v(" "),e("p",[t._v("那 Spring 和我们进行的后端应用开发是什么关系？这里需要提到 SpringMVC..")]),t._v(" "),e("h3",{attrs:{id:"springmvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[t._v("#")]),t._v(" SpringMVC")]),t._v(" "),e("p",[t._v("Spring Web MVC 是基于 Servlet API 构建的原始 Web 框架，从一开始就包含在 Spring 框架中。")]),t._v(" "),e("p",[t._v("我们之前知道 Servlet 是处理来自客户端的请求的，Servlet 基于用于处理请求和响应的低级 API。 Spring MVC 框架旨在使构建处理 HTTP 请求和响应的 Web 应用程序变得更加容易。")]),t._v(" "),e("p",[t._v("如果用 Servlet 来编写 Web 应用程序，我们处理的细节很多，比如验证请求、JSON 的请求/响应正文、表单绑定等等。我们需要编写大量实用程序代码来支持 Web 应用程序。对于我这个 iOS 开发者而言，就好比我们开发客户端应用的时候，一般不会使用系统自带的网络请求库，而是使用 Alamofire 这类第三方网络请求库一样。")]),t._v(" "),e("h3",{attrs:{id:"spring-boot-vs-spring-vs-springmvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-vs-spring-vs-springmvc"}},[t._v("#")]),t._v(" Spring Boot vs Spring vs SpringMVC")]),t._v(" "),e("p",[t._v("总结一下这三者的关系")]),t._v(" "),e("p",[e("strong",[t._v("Spring")]),t._v(" 是通用的 Java 工具库。\n"),e("strong",[t._v("Spring MVC")]),t._v(" 是 Spring 框架中的一个 Web 模块，一开始就包含在 Spring 框架中，同时也是基于 Servlet 的的 Web 框架，提供基础的服务。")]),t._v(" "),e("p",[e("strong",[t._v("Spring Boot")]),t._v(" 是为了简化 Spring 开发而产生的脚手架。正常 Spring 配置的东西很多，Spring Boot 提供了可视化的一键安装的方式，简化整个配置流程，当然理论上也可以不通过 Spring Boot 来配置应用程序。Spring Boot 也提供了 SpringMVC 框架的一些自动配置，"),e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/2.7.15/reference/html/web.html#web.servlet.spring-mvc.auto-configuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考这里"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("回到文章的主旨，认识上一章创建好的 SpringBoot 的后端项目(Web 服务器程序)，回忆一下之前创建项目的时候，有个步骤是选择依赖，当时我们勾选的是 "),e("strong",[t._v("Spring Web")]),t._v("。这个依赖的解释是「使用 Spring MVC 构建 We(包含 RESTful) 应用程序，并且使用 Apache TomCat 作为默认的内置(servlet)容器」所以项目底层是使用 Spring MVC Web 框架。")]),t._v(" "),e("p",[t._v("我们也可以在项目里的 pom.xml 依赖管理文件里看到项目的依赖，"),e("code",[t._v("spring-boot-starter-web")]),t._v(" 这个依赖就是之前添加的 "),e("code",[t._v("spring web")]),t._v(" 依赖。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n")])])]),e("h2",{attrs:{id:"理解-springmvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解-springmvc"}},[t._v("#")]),t._v(" 理解 SpringMVC")]),t._v(" "),e("p",[t._v("Spring Web MVC 的官方文档"),e("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/web.html#mvc",target:"_blank",rel:"noopener noreferrer"}},[t._v("在这里"),e("OutboundLink")],1),t._v("可以查看。具体内容很多，这里不深入原理细节，还是结合项目来理解一下 Spring MVC 到底在项目中是如何工作的？")]),t._v(" "),e("h3",{attrs:{id:"先理解-mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先理解-mvc"}},[t._v("#")]),t._v(" 先理解 MVC")]),t._v(" "),e("p",[t._v("之前做客户端的时候，写过一篇关于 MVC 的文章《"),e("a",{attrs:{href:"https://fanthus.github.io/2023/01/28/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3mvc-%E5%92%8C-mvp/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MVC和MVP的简单理解"),e("OutboundLink")],1),t._v("》，传统的 MVC 架构如下，本质上 MVC 是逻辑、数据、界面显示分离的一套软件设计规范。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(498),alt:"Untitled"}})]),t._v(" "),e("p",[t._v("各个端的职责")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Model")]),t._v("（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。")]),t._v(" "),e("li",[e("strong",[t._v("View")]),t._v("（视图）是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。")]),t._v(" "),e("li",[e("strong",[t._v("Controller")]),t._v("（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。")])]),t._v(" "),e("h3",{attrs:{id:"说回-spring-mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说回-spring-mvc"}},[t._v("#")]),t._v(" 说回 Spring MVC")]),t._v(" "),e("p",[t._v("Spring Web MVC 就是实现了Web MVC 设计模式轻量级 Web 框架，它是基于请求驱动的，并且也使用了前端控制器模式来进行设计，再根据请求映射规则分发给相应的控制器进行处理。")]),t._v(" "),e("p",[t._v("具体的请求处理流程在官方文档的 "),e("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/web.html#mvc-servlet-sequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringMVC → 1.1.5 Processing"),e("OutboundLink")],1),t._v(" 这里，这里先不叙述了。")]),t._v(" "),e("p",[t._v("阿里云社区上的"),e("a",{attrs:{href:"https://developer.aliyun.com/article/592945",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章"),e("OutboundLink")],1),t._v("对 Spring Web 项目介绍的特别好，这里直接引用如下")]),t._v(" "),e("p",[t._v("整个 Spring Web 工程将主要分为5个模块：view、controller、service、model和AOP，这些模块是具有层级关系的，view 最靠近浏览器端，所以在层级上面属于最上层，浏览器发送请求并由controller 响应请求并调用底下的 service，由 service 层去操作数据，controller 将得到 service 的返回结果并将数据传递给 view 层，最终 view 层输出给浏览器，而 AOP 将作为通用模块使用。用图说明如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(499),alt:"Untitled"}})]),t._v(" "),e("p",[t._v("在上面的说明中 controller 层应该是非常轻量的，因为它只负责转发请求，不做具体的业务逻辑。model 层是涉及到数据库相关操作的，这里不多解释。")]),t._v(" "),e("h2",{attrs:{id:"结合项目说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结合项目说明"}},[t._v("#")]),t._v(" 结合项目说明")]),t._v(" "),e("p",[t._v("为了方便对照说明，贴一张上一篇笔记的项目图")]),t._v(" "),e("p",[e("img",{attrs:{src:s(500),alt:"Untitled"}})]),t._v(" "),e("h3",{attrs:{id:"项目目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目目录"}},[t._v("#")]),t._v(" 项目目录")]),t._v(" "),e("p",[t._v("回到我们的项目里，我们创建对应路径响应的时候，创建了一个名字为 controller 的 package，在项目下创建了一个 HelloController 的文件。")]),t._v(" "),e("p",[t._v("这个 Controller 对应了 MVC 中的 Controller 这个概念，只不过我们项目比较简单，没有涉及到 model 和 service 层，而且上面也没有涉及到 view 层。")]),t._v(" "),e("h3",{attrs:{id:"项目注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目注解"}},[t._v("#")]),t._v(" 项目注解")]),t._v(" "),e("p",[t._v("controller 实现中涉及到的三个注解是 "),e("code",[t._v("@RestController")]),t._v(" 以及 "),e("code",[t._v('@RequestMapping("/hello")')]),t._v("。这三个注解都是 SpringMVC 框架提供的。")]),t._v(" "),e("p",[e("code",[t._v("@RestController")]),t._v(" 是从Spring 4.0以后产生的，用来将 json/xml 数据发送到前台页面，而不是返回视图页面。")]),t._v(" "),e("p",[t._v("在此之前使用的注解是 "),e("code",[t._v("@Controller")]),t._v("，如果上面注解修改为 "),e("code",[t._v("@Controller")]),t._v(" 则再请求 "),e("code",[t._v("/hello")]),t._v(" 路径网页会报错如下，本质原因是 "),e("code",[t._v("@Controller")]),t._v(" 返回的是视图页面，这时候必须配合 "),e("code",[t._v("@ResponseBody")]),t._v(" 注解才能达到 "),e("code",[t._v("@RestController")]),t._v(" 的效果，所以现在都直接使用 "),e("code",[t._v("@RestController")]),t._v(" 。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Whitelabel Error Page \nThis application has no explicit mapping for /error, so you are seeing this as a fallback.\nThu Sep 14 19:52:00 CST 2023\nThere was an unexpected error (type=Not Found, status=404).\n")])])]),e("p",[e("code",[t._v('@RequestMapping("/hello")')]),t._v(" 这个注解用来映射请求，也就是通过它来指定控制器可以处理哪些URL请求。这个注解可以使用在Controller层的类或者方法上。")]),t._v(" "),e("p",[t._v("比如这里添加了 "),e("code",[t._v("/hello")]),t._v(" 请求路径，表示这个方法可以处理这个路径，请求打过来的时候就会执行此方法，我们在方法里做我们想要做的事情。")]),t._v(" "),e("blockquote",[e("p",[t._v("回到我们最开始的 Servlet，其实这个方法做的事情看起来和 Servelet 提供的 service 方法很像，只不过经过了 Spring MVC 的层层包装，让实现变得更加简单。")])]),t._v(" "),e("p",[t._v("还有更高级的 "),e("code",[t._v("@GetMapping(”路径信息”)")]),t._v(" ，"),e("code",[t._v('@PostMapping("路径信息")')]),t._v(" 这种注解，它是对 "),e("code",[t._v("@RequestMapping")]),t._v(" 的更高级别的封装形式，明确了当前方法能处理的 HTTP 请求方法类型是 Get 还是 Post。")]),t._v(" "),e("p",[t._v("这里只是最简单的介绍，更多的注解在使用中慢慢体会了。")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("以上就是本文的全部内容，介绍了后端项目用到的框架以及运行起来的原理，介绍了 SpringMVC 框架对应的项目目录，以及一些注解的使用，非常粗浅，作为本人学习过程中的笔记整理，希望对你有帮助。")]),t._v(" "),e("p",[t._v("接下来尝试在项目中连接数据库，相关笔记在"),e("RouterLink",{attrs:{to:"/_posts/2023-09-21-后端学习笔记-安装MySQL数据库并在项目中配置MyBatis.html"}},[t._v("这篇文章")])],1),t._v(" "),e("p",[t._v("参考地址:")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://www.runoob.com/servlet/servlet-intro.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java Servlet"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://c.biancheng.net/servlet2/what-is-servlet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Servlet到底是什么（非常透彻）"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Framework Documentation"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/2.7.15/reference/html/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot Reference Documentation"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/2.7.15/reference/html/web.html#web.servlet.spring-mvc.auto-configuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot → Spring MVC Auto-configuration"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://stackoverflow.com/questions/10775522/raw-servlet-vs-spring-mvc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raw Servlet vs. Spring MVC [closed]"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7114681674402627598",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot的Controller层常用注解"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/niceyoo/p/14022503.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("从使用传统Web框架到切换到Spring Boot后的总结"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/spring/spring-x-framework-springmvc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring基础 - SpringMVC 理论说明&请求流程和案例"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.aliyun.com/article/592945",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里老司机带你使用Spring框架快速搭建Web工程项目"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.zhihu.com/question/31151832",target:"_blank",rel:"noopener noreferrer"}},[t._v("零基础如何系统学习Java Web？"),e("OutboundLink")],1)])]),t._v(" "),e("Vssue",{attrs:{title:"认识后端HelloWolrd项目"}})],1)}),[],!1,null,null,null);e.default=n.exports}}]);