(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{649:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"string-定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-定义"}},[t._v("#")]),t._v(" String 定义")]),t._v(" "),s("p",[t._v("官方定义 "),s("code",[t._v("String")]),t._v(" 就是一组字符的集合。")]),t._v(" "),s("p",[t._v("和 Objective-C 不同， Swift 中的 "),s("code",[t._v("String")]),t._v(" 是值类型，并且我们通过下标去访问字符串某个字符的时候，Swift 中下标的类型是 "),s("code",[t._v("String.Index")]),t._v("，而不是 "),s("code",[t._v("Int")]),t._v("..")]),t._v(" "),s("h3",{attrs:{id:"下标为何是-string-index-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下标为何是-string-index-类型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("下标为何是 String.Index 类型?")])]),t._v(" "),s("p",[s("code",[t._v("String.Index")]),t._v(" 的定义是「A position of a character or code unit in a string」。这句话中的 "),s("code",[t._v("code unit")]),t._v(" 通常指的是构成字符串的最小单位，即 "),s("code",[t._v("String.Index")]),t._v(" 表示字符串中字符的位置。")]),t._v(" "),s("p",[t._v("我们可以通过 String.Index 作为集合下标去获取字符串中某个字符，代码如下")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//str.startIndex 表示字符串中首个字符的位置 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 终端输出 h")]),t._v("\n")])])]),s("p",[t._v("回到标题中，为何是 "),s("code",[t._v("String.Index")]),t._v(" 类型作为 Swift 中字符串的下标呢？")]),t._v(" "),s("p",[t._v("这里需要引出 Unicode 的概念。")]),t._v(" "),s("h3",{attrs:{id:"unicode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unicode"}},[t._v("#")]),t._v(" Unicode")]),t._v(" "),s("p",[t._v("Unicode，本质是一个标准（The Unicode Standard），它整理、编码了世界上大部分的文字系统，使得电脑能以通用划一的字符集来处理和显示文字，不但减轻在不同编码系统间切换和转换的困扰，更提供了一种跨平台的乱码问题解决方案。")]),t._v(" "),s("p",[t._v("Swift 是 Unicode 兼容的，这意味着 Swift 语言中的字符串可以表示世界上大部分文字系统中的文字符号。")]),t._v(" "),s("p",[t._v("Swift 的原生 String 类型是由 Unicode Scalar(Unicode标量值)构建的。Unicode Scalar 是一个用于字符或修饰符的独特 21 位数字，例如 "),s("code",[t._v("U+0061")]),t._v(" 代表 "),s("code",[t._v('LATIN SMALL LETTER A ("a")')]),t._v(" 或者 "),s("code",[t._v("U+1F425")]),t._v(" 代表 "),s("code",[t._v('FRONT-FACING BABY CHICK ("🐥")')])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：这里的 Unicode 标量值构建并不表示 Swift 中的字符串的存储方式")])]),t._v(" "),s("p",[t._v("关于 Unicode 标量值和码点的区别，可以看看"),s("a",{attrs:{href:"https://www.unicode.org/glossary/#code_point",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方术语表"),s("OutboundLink")],1),t._v("中两者的定义。")]),t._v(" "),s("ul",[s("li",[s("em",[s("a",{attrs:{href:"https://www.unicode.org/glossary/#code_point",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Point"),s("OutboundLink")],1),t._v("(码点)")]),t._v(". Unicode 空间中的任何值；即整数范围从 0 到 10FFFF（总共 21 位）。")]),t._v(" "),s("li",[s("em",[s("a",{attrs:{href:"https://www.unicode.org/glossary/#unicode_scalar_value",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unicode Scalar Value"),s("OutboundLink")],1),t._v("(标量值)")]),t._v(". 除高代理和低代理代码点之外的任何 Unicode 码点，即它是 Code Point 的子集。")])]),t._v(" "),s("p",[t._v("我们可以直接遍历字符串中字符的 Unicode 标量值，代码如下")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" flowers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S笑😁"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" flowers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unicodeScalars "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//83 31505 128513 ")]),t._v("\n")])])]),s("p",[t._v("代码打印的都是十进制，转换为对应的十六进制，分别是U+0053, U+7B11, U+1F601，通过"),s("a",{attrs:{href:"https://www.fileformat.info/info/unicode/char/search.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("查询"),s("OutboundLink")],1),t._v("确实是上面三个字符，我们也可以验证一下")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u{53}\\u{7B11}\\u{1F601}"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//S笑😁")]),t._v("\n")])])]),s("p",[t._v("说到这里还是没有解决我们的疑问，在上面的字符中我们似乎仍然可以通过整数下标的方式来获取字符串中某个指定的字符，即单个的 Unicode 标量值。所以我们继续看看什么场景下，通过整型下标没办法获取给定的字符串。")]),t._v(" "),s("p",[t._v("在 Unicode 编码中，一个可阅读字符可能由多个 Unicode 标量值组合而成，比如扩展图素簇（Extended Grapheme Cluster）。")]),t._v(" "),s("p",[t._v("举个实际使用的例子，比如 é，它可以用唯一的 Unicode 标量值 "),s("code",[t._v("U+00E9")]),t._v(" 表示；同时它也可以用两个 Unicode 标量值 "),s("code",[t._v("U+0065")]),t._v(", "),s("code",[t._v("U+0301")]),t._v(" 表示，而且尽管是两个 Unicode 标量表示的字符，我们获取其长度仍然为 1，也很好理解，因为人们肉眼看到的就是一个字符。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"é"')])]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//双unicode标量值表示")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" scalar "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unicodeScalars "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scalar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//101 769 1")]),t._v("\n")])])]),s("p",[t._v("像这样的字符如果出现在我们的字符串里，如果想要整型下标获取字符的话就会比较麻烦，多说一句，数组定位元素的本质方式就是通过数组起始内存地址+下标偏移量，这就要求数组中的元素占用的空间是一致的。")]),t._v(" "),s("blockquote",[s("p",[t._v("跑题一下，在 Swift 中，我们经常看到不同的数据类型可以遵守相同的协议，然后我们可以创建一个给定协议类型的数组，我们也可以通过下标去定位协议数组中的某个元素。这时候 Swift 语言是如何保证协议类型数组中的元素类型大小一致呢？答案是 Swift 语言为协议单独进行了内存空间布局，保证了协议类型元素的大小是一样的，参考"),s("a",{attrs:{href:"https://mikeash.com/pyblog/friday-qa-2014-08-01-exploring-swift-memory-layout-part-ii.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("p",[t._v("在当下字符串这种存储方式里，因为不同的字符占据的内存是不同的，所以需要通过新的下标方式去获取给定位置的字符。")]),t._v(" "),s("p",[t._v("这也就是为什么使用 "),s("code",[t._v("String.Index")]),t._v(" 去获取下标的原因。")]),t._v(" "),s("blockquote",[s("p",[t._v("different characters can require different amounts of memory to store, so in order to determine which Character is at a particular position, you must iterate over each Unicode scalar from the start or end of that String. For this reason, Swift strings can’t be indexed by integer value")])]),t._v(" "),s("p",[t._v("不过 Swift 中有一个获取 "),s("code",[t._v("String.Index")]),t._v(" 的 API 如下，这里的 "),s("code",[t._v("distance")]),t._v(" 参数表示的字符的 "),s("code",[t._v("count")]),t._v("，我们上面也分析过就算是双标量值表示的字符 é，它的 "),s("code",[t._v("count")]),t._v(" 依旧为 1，所以这里用 "),s("code",[t._v("Int")]),t._v(" 类型数值作为 "),s("code",[t._v("String.Index")]),t._v(" 偏移量并不冲突。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offsetBy distance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),t._v("\n")])])]),s("h1",{attrs:{id:"实际操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际操作"}},[t._v("#")]),t._v(" 实际操作")]),t._v(" "),s("h2",{attrs:{id:"遍历字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历字符串"}},[t._v("#")]),t._v(" "),s("strong",[t._v("遍历字符串")])]),t._v(" "),s("p",[t._v("遍历字符串的方法")]),t._v(" "),s("p",[s("strong",[t._v("方法一，直接遍历字符串。")])]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("character")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("**方法二，将字符串转成字符数组。**代码如下")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" chars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" char "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" chars "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"char is ')]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("\\(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("**方法三，通过 "),s("code",[t._v("index+while")]),t._v(" 方式去进行遍历，**不过没办法通过 "),s("code",[t._v("for index in startIndex…endIndex")]),t._v(" 这种方式遍历。")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endIndex "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("after"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这里其实最值得注意的就是 Swift 字符串中的下标（比如上面的 "),s("code",[t._v("str.startIndex")]),t._v(" 变量）并不是 Int 类型，而是 "),s("code",[t._v("String.Index")]),t._v(" 类型。")]),t._v(" "),s("h2",{attrs:{id:"删除字符串中的某个字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除字符串中的某个字符"}},[t._v("#")]),t._v(" 删除字符串中的某个字符")]),t._v(" "),s("p",[t._v("参考 "),s("a",{attrs:{href:"https://leetcode.cn/problems/remove-element/description/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 27. 移除元素"),s("OutboundLink")],1),t._v(" 这道题，我尝试删除字符串中的某个字符，基本思路还是一致的，但是一些具体的操作细节挺考验对 Swift String 相关的 API 的理解和使用。")]),t._v(" "),s("p",[t._v("总的代码如下")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除给定字符串中的指定字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   str: 给定的字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  char: 指定字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("deleteCharacters")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inout")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" slowIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" quickIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" quickIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endIndex "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tchar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("quickIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" tchar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" char "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceSubrange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slowIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("slowIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" with"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tchar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            slowIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("after"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" slowIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        quickIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("after"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" quickIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" range "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..<")]),t._v("slowIndex\n    str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("range"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面这段代码中需要注意的")]),t._v(" "),s("ol",[s("li",[t._v("我们已经讨论过的，要通过 "),s("code",[t._v("String.Index")]),t._v(" 下标的方式去遍历字符串，而非普通的整型下标。")]),t._v(" "),s("li",[t._v("修改 String 实例的某个下标字符，不能通过 "),s("code",[t._v("str[x] = “x”")]),t._v(" 的方式去修改。")]),t._v(" "),s("li",[t._v("获取某个下标的前后下标，需要通过专门的 API "),s("code",[t._v("func index(after i: String.Index) -> String.Index")]),t._v(" 去获得。")]),t._v(" "),s("li",[t._v("获取给定区间的子字符串的方式。先拿到 range，通过下标+range的方式去获得子字符串。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);